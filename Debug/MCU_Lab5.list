
MCU_Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e4  080048e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048e4  080048e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e4  080048e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  0800495c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800495c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d70b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002547  00000000  00000000  0002d7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0002fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a258  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe64  00000000  00000000  0004bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e47d  00000000  00000000  0005bab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9f31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  000e9f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004850 	.word	0x08004850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004850 	.word	0x08004850

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <_Z9toggleLedv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void toggleLed(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	  	 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000174:	2120      	movs	r1, #32
 8000176:	4802      	ldr	r0, [pc, #8]	; (8000180 <_Z9toggleLedv+0x10>)
 8000178:	f001 ffdc 	bl	8002134 <HAL_GPIO_TogglePin>
 }
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <HAL_UART_RxCpltCallback>:
uint8_t temp = 0;
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a10      	ldr	r2, [pc, #64]	; (80001d4 <HAL_UART_RxCpltCallback+0x50>)
 8000192:	4293      	cmp	r3, r2
 8000194:	d119      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x46>
//        HAL_UART_Transmit(&huart2, &temp, 1, 50);
        buffer[index_buffer++] = temp;
 8000196:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <HAL_UART_RxCpltCallback+0x54>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	b2d1      	uxtb	r1, r2
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <HAL_UART_RxCpltCallback+0x54>)
 80001a0:	7011      	strb	r1, [r2, #0]
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <HAL_UART_RxCpltCallback+0x58>)
 80001a6:	7819      	ldrb	r1, [r3, #0]
 80001a8:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <HAL_UART_RxCpltCallback+0x5c>)
 80001aa:	5499      	strb	r1, [r3, r2]
        if (index_buffer == MAX_BUFFER_SIZE) {
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <HAL_UART_RxCpltCallback+0x54>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b1e      	cmp	r3, #30
 80001b2:	d102      	bne.n	80001ba <HAL_UART_RxCpltCallback+0x36>
            index_buffer = 0;
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <HAL_UART_RxCpltCallback+0x54>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
        }
        buffer_flag = 1;
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <HAL_UART_RxCpltCallback+0x60>)
 80001bc:	2201      	movs	r2, #1
 80001be:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001c0:	2201      	movs	r2, #1
 80001c2:	4906      	ldr	r1, [pc, #24]	; (80001dc <HAL_UART_RxCpltCallback+0x58>)
 80001c4:	4808      	ldr	r0, [pc, #32]	; (80001e8 <HAL_UART_RxCpltCallback+0x64>)
 80001c6:	f003 fa3e 	bl	8003646 <HAL_UART_Receive_IT>
    }
}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40004400 	.word	0x40004400
 80001d8:	2000016a 	.word	0x2000016a
 80001dc:	20000148 	.word	0x20000148
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	2000016b 	.word	0x2000016b
 80001e8:	20000104 	.word	0x20000104

080001ec <_Z18command_parser_fsmv>:
uint8_t command_parser_state = PARSER_BEGIN;
uint8_t command_data[MAX_BUFFER_SIZE];
uint8_t index_parser = 0;
uint8_t command_flag = 0;

void command_parser_fsm(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	uint8_t index_reading = index_buffer - 1;
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <_Z18command_parser_fsmv+0xa4>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	71fb      	strb	r3, [r7, #7]
	if(index_reading < 0) index_reading = MAX_BUFFER_SIZE - 1;

	switch (command_parser_state) {
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <_Z18command_parser_fsmv+0xa8>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d002      	beq.n	8000208 <_Z18command_parser_fsmv+0x1c>
 8000202:	2b01      	cmp	r3, #1
 8000204:	d009      	beq.n	800021a <_Z18command_parser_fsmv+0x2e>
 8000206:	e040      	b.n	800028a <_Z18command_parser_fsmv+0x9e>
	//CASE wait for '!'
		case PARSER_BEGIN:
			if(buffer[index_reading] == '!'){
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a23      	ldr	r2, [pc, #140]	; (8000298 <_Z18command_parser_fsmv+0xac>)
 800020c:	5cd3      	ldrb	r3, [r2, r3]
 800020e:	2b21      	cmp	r3, #33	; 0x21
 8000210:	d13a      	bne.n	8000288 <_Z18command_parser_fsmv+0x9c>
				command_parser_state = PARSER_PARSING;
 8000212:	4b20      	ldr	r3, [pc, #128]	; (8000294 <_Z18command_parser_fsmv+0xa8>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000218:	e036      	b.n	8000288 <_Z18command_parser_fsmv+0x9c>
    //Case parsing the command
		case PARSER_PARSING:
			if(buffer[index_reading] == '!'){
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <_Z18command_parser_fsmv+0xac>)
 800021e:	5cd3      	ldrb	r3, [r2, r3]
 8000220:	2b21      	cmp	r3, #33	; 0x21
 8000222:	d108      	bne.n	8000236 <_Z18command_parser_fsmv+0x4a>
                memset(command_data, '\0', MAX_BUFFER_SIZE);
 8000224:	221e      	movs	r2, #30
 8000226:	2100      	movs	r1, #0
 8000228:	481c      	ldr	r0, [pc, #112]	; (800029c <_Z18command_parser_fsmv+0xb0>)
 800022a:	f003 fe8f 	bl	8003f4c <memset>
                index_parser = 0;
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <_Z18command_parser_fsmv+0xb4>)
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
				return;
 8000234:	e029      	b.n	800028a <_Z18command_parser_fsmv+0x9e>
			}
			if(buffer[index_reading] == '#'){
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a17      	ldr	r2, [pc, #92]	; (8000298 <_Z18command_parser_fsmv+0xac>)
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	2b23      	cmp	r3, #35	; 0x23
 800023e:	d116      	bne.n	800026e <_Z18command_parser_fsmv+0x82>
				command_parser_state = PARSER_BEGIN;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <_Z18command_parser_fsmv+0xa8>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
				command_flag = 1;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <_Z18command_parser_fsmv+0xb8>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
				index_parser = 0;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <_Z18command_parser_fsmv+0xb4>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
				command_parser_state = PARSER_BEGIN;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <_Z18command_parser_fsmv+0xa8>)
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
				//TODO clear command_data[MAX_BUFFER_SIZE]
				index_parser = 0;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <_Z18command_parser_fsmv+0xb4>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, command_data, sizeof(command_data), 1000);
 800025e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000262:	221e      	movs	r2, #30
 8000264:	490d      	ldr	r1, [pc, #52]	; (800029c <_Z18command_parser_fsmv+0xb0>)
 8000266:	4810      	ldr	r0, [pc, #64]	; (80002a8 <_Z18command_parser_fsmv+0xbc>)
 8000268:	f003 f95b 	bl	8003522 <HAL_UART_Transmit>
 800026c:	e00d      	b.n	800028a <_Z18command_parser_fsmv+0x9e>
//				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
			}
			else {
				command_data[index_parser++] = buffer[index_reading];
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <_Z18command_parser_fsmv+0xb4>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	1c59      	adds	r1, r3, #1
 8000276:	b2c8      	uxtb	r0, r1
 8000278:	4909      	ldr	r1, [pc, #36]	; (80002a0 <_Z18command_parser_fsmv+0xb4>)
 800027a:	7008      	strb	r0, [r1, #0]
 800027c:	4619      	mov	r1, r3
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <_Z18command_parser_fsmv+0xac>)
 8000280:	5c9a      	ldrb	r2, [r3, r2]
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <_Z18command_parser_fsmv+0xb0>)
 8000284:	545a      	strb	r2, [r3, r1]
 8000286:	e000      	b.n	800028a <_Z18command_parser_fsmv+0x9e>
			break;
 8000288:	bf00      	nop
				//TODO Handle buffer overflow case
			}
	}
}
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000016a 	.word	0x2000016a
 8000294:	2000016c 	.word	0x2000016c
 8000298:	2000014c 	.word	0x2000014c
 800029c:	20000170 	.word	0x20000170
 80002a0:	2000018e 	.word	0x2000018e
 80002a4:	2000018f 	.word	0x2000018f
 80002a8:	20000104 	.word	0x20000104

080002ac <_Z8ADC_readv>:
#include "software_timer.h"
uint32_t ADC_value = 0;
uint8_t uart_communication_state = RST_STATE;
char previous_packet[MAX_BUFFER_SIZE];

void ADC_read(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    // Ensure ADC is properly started and polled for conversion
    HAL_ADC_Start(&hadc1);
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <_Z8ADC_readv+0x34>)
 80002b2:	f000 ffbb 	bl	800122c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 80002b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <_Z8ADC_readv+0x34>)
 80002bc:	f001 f864 	bl	8001388 <HAL_ADC_PollForConversion>
    // Get the ADC value
    ADC_value = HAL_ADC_GetValue(&hadc1);
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <_Z8ADC_readv+0x34>)
 80002c2:	f001 f967 	bl	8001594 <HAL_ADC_GetValue>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <_Z8ADC_readv+0x38>)
 80002ca:	6013      	str	r3, [r2, #0]
    // Convert the ADC value to a string and send it over UART
    sprintf(previous_packet, "!%lu#\r\n", ADC_value);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <_Z8ADC_readv+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	4905      	ldr	r1, [pc, #20]	; (80002e8 <_Z8ADC_readv+0x3c>)
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <_Z8ADC_readv+0x40>)
 80002d6:	f003 fe41 	bl	8003f5c <siprintf>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	20000190 	.word	0x20000190
 80002e8:	08004868 	.word	0x08004868
 80002ec:	20000198 	.word	0x20000198

080002f0 <_Z22uart_communication_fsmv>:

void uart_communication_fsm(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    switch (uart_communication_state) {
 80002f4:	4b2f      	ldr	r3, [pc, #188]	; (80003b4 <_Z22uart_communication_fsmv+0xc4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <_Z22uart_communication_fsmv+0x12>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d029      	beq.n	8000354 <_Z22uart_communication_fsmv+0x64>
                // Consider if this transmission is necessary
                memset(command_data, '\0', MAX_BUFFER_SIZE);
            }
            break;
    }
}
 8000300:	e056      	b.n	80003b0 <_Z22uart_communication_fsmv+0xc0>
            if(command_flag){
 8000302:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <_Z22uart_communication_fsmv+0xc8>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d04f      	beq.n	80003aa <_Z22uart_communication_fsmv+0xba>
                command_flag = 0;
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <_Z22uart_communication_fsmv+0xc8>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
                if(!strcmp((char*)command_data, "RST")){
 8000310:	492a      	ldr	r1, [pc, #168]	; (80003bc <_Z22uart_communication_fsmv+0xcc>)
 8000312:	482b      	ldr	r0, [pc, #172]	; (80003c0 <_Z22uart_communication_fsmv+0xd0>)
 8000314:	f7ff ff1a 	bl	800014c <strcmp>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d114      	bne.n	8000348 <_Z22uart_communication_fsmv+0x58>
                    uart_communication_state = OK_STATE;
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <_Z22uart_communication_fsmv+0xc4>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
                    ADC_read();
 8000324:	f7ff ffc2 	bl	80002ac <_Z8ADC_readv>
                    HAL_UART_Transmit(&huart2, (uint8_t*)previous_packet, strlen(previous_packet), 1000);
 8000328:	4826      	ldr	r0, [pc, #152]	; (80003c4 <_Z22uart_communication_fsmv+0xd4>)
 800032a:	f7ff ff19 	bl	8000160 <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	b29a      	uxth	r2, r3
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000336:	4923      	ldr	r1, [pc, #140]	; (80003c4 <_Z22uart_communication_fsmv+0xd4>)
 8000338:	4823      	ldr	r0, [pc, #140]	; (80003c8 <_Z22uart_communication_fsmv+0xd8>)
 800033a:	f003 f8f2 	bl	8003522 <HAL_UART_Transmit>
                    setTimer(3000, 0);
 800033e:	2100      	movs	r1, #0
 8000340:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000344:	f000 fc64 	bl	8000c10 <setTimer>
                memset(command_data, '\0', MAX_BUFFER_SIZE);
 8000348:	221e      	movs	r2, #30
 800034a:	2100      	movs	r1, #0
 800034c:	481c      	ldr	r0, [pc, #112]	; (80003c0 <_Z22uart_communication_fsmv+0xd0>)
 800034e:	f003 fdfd 	bl	8003f4c <memset>
            break;
 8000352:	e02a      	b.n	80003aa <_Z22uart_communication_fsmv+0xba>
            if(timer_flag[0]){
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <_Z22uart_communication_fsmv+0xdc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00f      	beq.n	800037c <_Z22uart_communication_fsmv+0x8c>
                setTimer(3000, 0);
 800035c:	2100      	movs	r1, #0
 800035e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000362:	f000 fc55 	bl	8000c10 <setTimer>
                HAL_UART_Transmit(&huart2, (uint8_t*)previous_packet, strlen(previous_packet), 1000);
 8000366:	4817      	ldr	r0, [pc, #92]	; (80003c4 <_Z22uart_communication_fsmv+0xd4>)
 8000368:	f7ff fefa 	bl	8000160 <strlen>
 800036c:	4603      	mov	r3, r0
 800036e:	b29a      	uxth	r2, r3
 8000370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000374:	4913      	ldr	r1, [pc, #76]	; (80003c4 <_Z22uart_communication_fsmv+0xd4>)
 8000376:	4814      	ldr	r0, [pc, #80]	; (80003c8 <_Z22uart_communication_fsmv+0xd8>)
 8000378:	f003 f8d3 	bl	8003522 <HAL_UART_Transmit>
            if(command_flag){
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <_Z22uart_communication_fsmv+0xc8>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d014      	beq.n	80003ae <_Z22uart_communication_fsmv+0xbe>
                command_flag = 0;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <_Z22uart_communication_fsmv+0xc8>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
                if(!strcmp((char*)command_data, "OK")){
 800038a:	4911      	ldr	r1, [pc, #68]	; (80003d0 <_Z22uart_communication_fsmv+0xe0>)
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <_Z22uart_communication_fsmv+0xd0>)
 800038e:	f7ff fedd 	bl	800014c <strcmp>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d102      	bne.n	800039e <_Z22uart_communication_fsmv+0xae>
                    uart_communication_state = RST_STATE;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <_Z22uart_communication_fsmv+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
                memset(command_data, '\0', MAX_BUFFER_SIZE);
 800039e:	221e      	movs	r2, #30
 80003a0:	2100      	movs	r1, #0
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <_Z22uart_communication_fsmv+0xd0>)
 80003a4:	f003 fdd2 	bl	8003f4c <memset>
            break;
 80003a8:	e001      	b.n	80003ae <_Z22uart_communication_fsmv+0xbe>
            break;
 80003aa:	bf00      	nop
 80003ac:	e000      	b.n	80003b0 <_Z22uart_communication_fsmv+0xc0>
            break;
 80003ae:	bf00      	nop
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000194 	.word	0x20000194
 80003b8:	2000018f 	.word	0x2000018f
 80003bc:	08004870 	.word	0x08004870
 80003c0:	20000170 	.word	0x20000170
 80003c4:	20000198 	.word	0x20000198
 80003c8:	20000104 	.word	0x20000104
 80003cc:	20000290 	.word	0x20000290
 80003d0:	08004874 	.word	0x08004874

080003d4 <_Z20check_command_parserv>:
void check_command_parser(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  if(buffer_flag){
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <_Z20check_command_parserv+0x20>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d004      	beq.n	80003ea <_Z20check_command_parserv+0x16>
	  command_parser_fsm();
 80003e0:	f7ff ff04 	bl	80001ec <_Z18command_parser_fsmv>
	  buffer_flag = 0;
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <_Z20check_command_parserv+0x20>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
  }
  uart_communication_fsm();
 80003ea:	f7ff ff81 	bl	80002f0 <_Z22uart_communication_fsmv>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000016b 	.word	0x2000016b

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 fddc 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f82e 	bl	8000460 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f000 f95e 	bl	80006c4 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000408:	f000 f8d2 	bl	80005b0 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 800040c:	f000 f888 	bl	8000520 <_ZL12MX_ADC1_Initv>
  MX_USART2_UART_Init();
 8000410:	f000 f92a 	bl	8000668 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <main+0x50>)
 8000416:	f002 fca3 	bl	8002d60 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2 , &temp , 1);
 800041a:	2201      	movs	r2, #1
 800041c:	490b      	ldr	r1, [pc, #44]	; (800044c <main+0x54>)
 800041e:	480c      	ldr	r0, [pc, #48]	; (8000450 <main+0x58>)
 8000420:	f003 f911 	bl	8003646 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(toggleLed, 200, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	21c8      	movs	r1, #200	; 0xc8
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <main+0x5c>)
 800042a:	f000 f9b9 	bl	80007a0 <SCH_Add_Task>
  SCH_Add_Task(check_command_parser, 100, 10);
 800042e:	220a      	movs	r2, #10
 8000430:	2164      	movs	r1, #100	; 0x64
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <main+0x60>)
 8000434:	f000 f9b4 	bl	80007a0 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 100, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	2164      	movs	r1, #100	; 0x64
 800043c:	4807      	ldr	r0, [pc, #28]	; (800045c <main+0x64>)
 800043e:	f000 f9af 	bl	80007a0 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000442:	f000 fba3 	bl	8000b8c <SCH_Dispatch_Tasks>
 8000446:	e7fc      	b.n	8000442 <main+0x4a>
 8000448:	200000bc 	.word	0x200000bc
 800044c:	20000148 	.word	0x20000148
 8000450:	20000104 	.word	0x20000104
 8000454:	08000171 	.word	0x08000171
 8000458:	080003d5 	.word	0x080003d5
 800045c:	08000c51 	.word	0x08000c51

08000460 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fd6c 	bl	8003f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	2302      	movs	r3, #2
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2310      	movs	r3, #16
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 fe7b 	bl	80021a0 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80004ba:	f000 f944 	bl	8000746 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 f8e3 	bl	80026a4 <HAL_RCC_ClockConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf14      	ite	ne
 80004e4:	2301      	movne	r3, #1
 80004e6:	2300      	moveq	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80004ee:	f000 f92a 	bl	8000746 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004f2:	2302      	movs	r3, #2
 80004f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f002 fa69 	bl	80029d4 <HAL_RCCEx_PeriphCLKConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	bf14      	ite	ne
 8000508:	2301      	movne	r3, #1
 800050a:	2300      	moveq	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000512:	f000 f918 	bl	8000746 <Error_Handler>
  }
}
 8000516:	bf00      	nop
 8000518:	3750      	adds	r7, #80	; 0x50
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000532:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <_ZL12MX_ADC1_Initv+0x8c>)
 8000534:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 800053e:	2201      	movs	r2, #1
 8000540:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000544:	2200      	movs	r2, #0
 8000546:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 800054a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800054e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 800055e:	f000 fd8d 	bl	800107c <HAL_ADC_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000572:	f000 f8e8 	bl	8000746 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057a:	2301      	movs	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZL12MX_ADC1_Initv+0x88>)
 8000588:	f001 f8e6 	bl	8001758 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	bf14      	ite	ne
 8000592:	2301      	movne	r3, #1
 8000594:	2300      	moveq	r3, #0
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 800059c:	f000 f8d3 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	40012400 	.word	0x40012400

080005b0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005e4:	2209      	movs	r2, #9
 80005e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f4:	481b      	ldr	r0, [pc, #108]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 80005f6:	f002 fb63 	bl	8002cc0 <HAL_TIM_Base_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800060a:	f000 f89c 	bl	8000746 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4619      	mov	r1, r3
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 800061c:	f002 fcf4 	bl	8003008 <HAL_TIM_ConfigClockSource>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf14      	ite	ne
 8000626:	2301      	movne	r3, #1
 8000628:	2300      	moveq	r3, #0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000630:	f000 f889 	bl	8000746 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <_ZL12MX_TIM2_Initv+0xb4>)
 8000642:	f002 feb7 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000656:	f000 f876 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000bc 	.word	0x200000bc

08000668 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000674:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80006a0:	f002 fef2 	bl	8003488 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf14      	ite	ne
 80006aa:	2301      	movne	r3, #1
 80006ac:	2300      	moveq	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80006b4:	f000 f847 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000104 	.word	0x20000104
 80006c0:	40004400 	.word	0x40004400

080006c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <_ZL12MX_GPIO_Initv+0x5c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <_ZL12MX_GPIO_Initv+0x5c>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <_ZL12MX_GPIO_Initv+0x5c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <_ZL12MX_GPIO_Initv+0x60>)
 80006f6:	f001 fd05 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006fa:	2320      	movs	r3, #32
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <_ZL12MX_GPIO_Initv+0x60>)
 8000712:	f001 fb7b 	bl	8001e0c <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
//		timerRun();
		SCH_Update();
 800073a:	f000 f811 	bl	8000760 <SCH_Update>
	}
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074a:	b672      	cpsid	i
}
 800074c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074e:	e7fe      	b.n	800074e <Error_Handler+0x8>

08000750 <SCH_Go_To_Sleep>:
static sTask SCH_tasks_G[SCH_MAX_TASKS];
static uint32_t newTaskID = 0;


static uint32_t Get_New_Task_ID(void);
void SCH_Go_To_Sleep(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000754:	2101      	movs	r1, #1
 8000756:	2000      	movs	r0, #0
 8000758:	f001 fd06 	bl	8002168 <HAL_PWR_EnterSLEEPMode>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <SCH_Update>:

void SCH_Init(void){

}

void SCH_Update(void){
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <SCH_Update+0x3c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d013      	beq.n	8000794 <SCH_Update+0x34>
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <SCH_Update+0x3c>)
 800076e:	7b1b      	ldrb	r3, [r3, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10f      	bne.n	8000794 <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <SCH_Update+0x3c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <SCH_Update+0x3c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <SCH_Update+0x3c>)
 8000784:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <SCH_Update+0x3c>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <SCH_Update+0x3c>)
 8000790:	2201      	movs	r2, #1
 8000792:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	200001b8 	.word	0x200001b8

080007a0 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0; // Index for iterating through tasks
 80007ac:	2300      	movs	r3, #0
 80007ae:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0; // Accumulator for total delay time
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0; // Delay time for the new task
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]

	// Iterate through tasks to find a suitable position for the new task
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80007b8:	2300      	movs	r3, #0
 80007ba:	77fb      	strb	r3, [r7, #31]
 80007bc:	e0e7      	b.n	800098e <SCH_Add_Task+0x1ee>
		sumDelay += SCH_tasks_G[newTaskIndex].Delay;
 80007be:	7ffa      	ldrb	r2, [r7, #31]
 80007c0:	4977      	ldr	r1, [pc, #476]	; (80009a0 <SCH_Add_Task+0x200>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	3304      	adds	r3, #4
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]

		// Check if the current position is suitable for the new task
		if(sumDelay > DELAY){
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d97c      	bls.n	80008d8 <SCH_Add_Task+0x138>
			// Calculate the delay for the new task and adjust the delay of the current task
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80007de:	7ffa      	ldrb	r2, [r7, #31]
 80007e0:	496f      	ldr	r1, [pc, #444]	; (80009a0 <SCH_Add_Task+0x200>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	3304      	adds	r3, #4
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	4413      	add	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80007fa:	7ffa      	ldrb	r2, [r7, #31]
 80007fc:	69b9      	ldr	r1, [r7, #24]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1ac9      	subs	r1, r1, r3
 8000802:	4867      	ldr	r0, [pc, #412]	; (80009a0 <SCH_Add_Task+0x200>)
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4403      	add	r3, r0
 800080e:	3304      	adds	r3, #4
 8000810:	6019      	str	r1, [r3, #0]

			// Shift tasks down to make room for the new task
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 8000812:	2309      	movs	r3, #9
 8000814:	75fb      	strb	r3, [r7, #23]
 8000816:	e017      	b.n	8000848 <SCH_Add_Task+0xa8>
				SCH_tasks_G[i] = SCH_tasks_G[i - 1];
 8000818:	7dfb      	ldrb	r3, [r7, #23]
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	7df9      	ldrb	r1, [r7, #23]
 800081e:	4860      	ldr	r0, [pc, #384]	; (80009a0 <SCH_Add_Task+0x200>)
 8000820:	460b      	mov	r3, r1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4418      	add	r0, r3
 800082a:	495d      	ldr	r1, [pc, #372]	; (80009a0 <SCH_Add_Task+0x200>)
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	4604      	mov	r4, r0
 8000838:	461d      	mov	r5, r3
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	6023      	str	r3, [r4, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	3b01      	subs	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	7ffb      	ldrb	r3, [r7, #31]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8e3      	bhi.n	8000818 <SCH_Add_Task+0x78>
			}

			// Insert the new task at the found position
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8000850:	7ffa      	ldrb	r2, [r7, #31]
 8000852:	4953      	ldr	r1, [pc, #332]	; (80009a0 <SCH_Add_Task+0x200>)
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8000862:	7ffa      	ldrb	r2, [r7, #31]
 8000864:	494e      	ldr	r1, [pc, #312]	; (80009a0 <SCH_Add_Task+0x200>)
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000876:	7ffa      	ldrb	r2, [r7, #31]
 8000878:	4949      	ldr	r1, [pc, #292]	; (80009a0 <SCH_Add_Task+0x200>)
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	3308      	adds	r3, #8
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].RunMe = (newDelay == 0) ? 1 : 0;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	7ffa      	ldrb	r2, [r7, #31]
 8000898:	4618      	mov	r0, r3
 800089a:	4941      	ldr	r1, [pc, #260]	; (80009a0 <SCH_Add_Task+0x200>)
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	330c      	adds	r3, #12
 80008a8:	4602      	mov	r2, r0
 80008aa:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80008ac:	7ffc      	ldrb	r4, [r7, #31]
 80008ae:	f000 f997 	bl	8000be0 <Get_New_Task_ID>
 80008b2:	4602      	mov	r2, r0
 80008b4:	493a      	ldr	r1, [pc, #232]	; (80009a0 <SCH_Add_Task+0x200>)
 80008b6:	4623      	mov	r3, r4
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4423      	add	r3, r4
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	3310      	adds	r3, #16
 80008c2:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80008c4:	7ffa      	ldrb	r2, [r7, #31]
 80008c6:	4936      	ldr	r1, [pc, #216]	; (80009a0 <SCH_Add_Task+0x200>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	3310      	adds	r3, #16
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	e05f      	b.n	8000998 <SCH_Add_Task+0x1f8>
		} else if(SCH_tasks_G[newTaskIndex].pTask == NULL){
 80008d8:	7ffa      	ldrb	r2, [r7, #31]
 80008da:	4931      	ldr	r1, [pc, #196]	; (80009a0 <SCH_Add_Task+0x200>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d14d      	bne.n	8000988 <SCH_Add_Task+0x1e8>
			// If an empty slot is found, insert the new task
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80008ec:	7ffa      	ldrb	r2, [r7, #31]
 80008ee:	492c      	ldr	r1, [pc, #176]	; (80009a0 <SCH_Add_Task+0x200>)
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80008fe:	7ffa      	ldrb	r2, [r7, #31]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	1ac9      	subs	r1, r1, r3
 8000906:	4826      	ldr	r0, [pc, #152]	; (80009a0 <SCH_Add_Task+0x200>)
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4403      	add	r3, r0
 8000912:	3304      	adds	r3, #4
 8000914:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8000916:	7ffa      	ldrb	r2, [r7, #31]
 8000918:	4921      	ldr	r1, [pc, #132]	; (80009a0 <SCH_Add_Task+0x200>)
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	3308      	adds	r3, #8
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].RunMe = (SCH_tasks_G[newTaskIndex].Delay == 0) ? 1 : 0;
 800092a:	7ffa      	ldrb	r2, [r7, #31]
 800092c:	491c      	ldr	r1, [pc, #112]	; (80009a0 <SCH_Add_Task+0x200>)
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	3304      	adds	r3, #4
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf0c      	ite	eq
 8000940:	2301      	moveq	r3, #1
 8000942:	2300      	movne	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	7ffa      	ldrb	r2, [r7, #31]
 8000948:	4618      	mov	r0, r3
 800094a:	4915      	ldr	r1, [pc, #84]	; (80009a0 <SCH_Add_Task+0x200>)
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	330c      	adds	r3, #12
 8000958:	4602      	mov	r2, r0
 800095a:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800095c:	7ffc      	ldrb	r4, [r7, #31]
 800095e:	f000 f93f 	bl	8000be0 <Get_New_Task_ID>
 8000962:	4602      	mov	r2, r0
 8000964:	490e      	ldr	r1, [pc, #56]	; (80009a0 <SCH_Add_Task+0x200>)
 8000966:	4623      	mov	r3, r4
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4423      	add	r3, r4
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	3310      	adds	r3, #16
 8000972:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8000974:	7ffa      	ldrb	r2, [r7, #31]
 8000976:	490a      	ldr	r1, [pc, #40]	; (80009a0 <SCH_Add_Task+0x200>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	3310      	adds	r3, #16
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	e007      	b.n	8000998 <SCH_Add_Task+0x1f8>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8000988:	7ffb      	ldrb	r3, [r7, #31]
 800098a:	3301      	adds	r3, #1
 800098c:	77fb      	strb	r3, [r7, #31]
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	2b09      	cmp	r3, #9
 8000992:	f67f af14 	bls.w	80007be <SCH_Add_Task+0x1e>
		}
	}

	// Return a special value (such as 0 or an error code) if no space is available
	return NO_TASK_ID; // Example error code for no space
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bdb0      	pop	{r4, r5, r7, pc}
 80009a0:	200001b8 	.word	0x200001b8

080009a4 <SCH_Delete_Task>:



uint8_t SCH_Delete_Task(uint32_t taskID){
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 80e2 	beq.w	8000b7c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e0da      	b.n	8000b74 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4971      	ldr	r1, [pc, #452]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3310      	adds	r3, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f040 80cb 	bne.w	8000b6e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d02b      	beq.n	8000a3a <SCH_Delete_Task+0x96>
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d828      	bhi.n	8000a3a <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	4966      	ldr	r1, [pc, #408]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d01d      	beq.n	8000a3a <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	4961      	ldr	r1, [pc, #388]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3304      	adds	r3, #4
 8000a10:	6819      	ldr	r1, [r3, #0]
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	485c      	ldr	r0, [pc, #368]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4403      	add	r3, r0
 8000a20:	3304      	adds	r3, #4
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	3201      	adds	r2, #1
 8000a28:	4419      	add	r1, r3
 8000a2a:	4857      	ldr	r0, [pc, #348]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4403      	add	r3, r0
 8000a36:	3304      	adds	r3, #4
 8000a38:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	73bb      	strb	r3, [r7, #14]
 8000a3e:	e060      	b.n	8000b02 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	1c59      	adds	r1, r3, #1
 8000a44:	7bba      	ldrb	r2, [r7, #14]
 8000a46:	4850      	ldr	r0, [pc, #320]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a48:	460b      	mov	r3, r1
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4403      	add	r3, r0
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	484c      	ldr	r0, [pc, #304]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4403      	add	r3, r0
 8000a60:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	1c59      	adds	r1, r3, #1
 8000a66:	7bba      	ldrb	r2, [r7, #14]
 8000a68:	4847      	ldr	r0, [pc, #284]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	440b      	add	r3, r1
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4403      	add	r3, r0
 8000a74:	3308      	adds	r3, #8
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	4843      	ldr	r0, [pc, #268]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4403      	add	r3, r0
 8000a84:	3308      	adds	r3, #8
 8000a86:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	1c59      	adds	r1, r3, #1
 8000a8c:	7bba      	ldrb	r2, [r7, #14]
 8000a8e:	483e      	ldr	r0, [pc, #248]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000a90:	460b      	mov	r3, r1
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4403      	add	r3, r0
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	6819      	ldr	r1, [r3, #0]
 8000a9e:	483a      	ldr	r0, [pc, #232]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4403      	add	r3, r0
 8000aaa:	3304      	adds	r3, #4
 8000aac:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	1c59      	adds	r1, r3, #1
 8000ab2:	7bba      	ldrb	r2, [r7, #14]
 8000ab4:	4834      	ldr	r0, [pc, #208]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4403      	add	r3, r0
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	7818      	ldrb	r0, [r3, #0]
 8000ac4:	4930      	ldr	r1, [pc, #192]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	330c      	adds	r3, #12
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	7bba      	ldrb	r2, [r7, #14]
 8000adc:	482a      	ldr	r0, [pc, #168]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000ade:	460b      	mov	r3, r1
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4403      	add	r3, r0
 8000ae8:	3310      	adds	r3, #16
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	4826      	ldr	r0, [pc, #152]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4403      	add	r3, r0
 8000af8:	3310      	adds	r3, #16
 8000afa:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	3301      	adds	r3, #1
 8000b00:	73bb      	strb	r3, [r7, #14]
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d99b      	bls.n	8000a40 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8000b08:	7bba      	ldrb	r2, [r7, #14]
 8000b0a:	491f      	ldr	r1, [pc, #124]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8000b1a:	7bba      	ldrb	r2, [r7, #14]
 8000b1c:	491a      	ldr	r1, [pc, #104]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	3308      	adds	r3, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8000b2e:	7bba      	ldrb	r2, [r7, #14]
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8000b42:	7bba      	ldrb	r2, [r7, #14]
 8000b44:	4910      	ldr	r1, [pc, #64]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	330c      	adds	r3, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8000b56:	7bba      	ldrb	r2, [r7, #14]
 8000b58:	490b      	ldr	r1, [pc, #44]	; (8000b88 <SCH_Delete_Task+0x1e4>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	3310      	adds	r3, #16
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
				return Return_code;
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
 8000b6c:	e007      	b.n	8000b7e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	3301      	adds	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b09      	cmp	r3, #9
 8000b78:	f67f af21 	bls.w	80009be <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8000b7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200001b8 	.word	0x200001b8

08000b8c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <SCH_Dispatch_Tasks+0x50>)
 8000b94:	7b1b      	ldrb	r3, [r3, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d019      	beq.n	8000bce <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <SCH_Dispatch_Tasks+0x50>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset flag
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <SCH_Dispatch_Tasks+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <SCH_Dispatch_Tasks+0x50>)
 8000ba8:	1d3c      	adds	r4, r7, #4
 8000baa:	461d      	mov	r5, r3
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fef4 	bl	80009a4 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fde9 	bl	80007a0 <SCH_Add_Task>
		}
	}
	SCH_Go_To_Sleep();
 8000bce:	f7ff fdbf 	bl	8000750 <SCH_Go_To_Sleep>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001b8 	.word	0x200001b8

08000be0 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	newTaskID++;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000bec:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <Get_New_Task_ID+0x20>
		newTaskID++;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000bfe:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <Get_New_Task_ID+0x2c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000280 	.word	0x20000280

08000c10 <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <setTimer+0x34>)
 8000c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c22:	1092      	asrs	r2, r2, #2
 8000c24:	17db      	asrs	r3, r3, #31
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <setTimer+0x38>)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <setTimer+0x3c>)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2100      	movs	r1, #0
 8000c36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	66666667 	.word	0x66666667
 8000c48:	20000284 	.word	0x20000284
 8000c4c:	20000290 	.word	0x20000290

08000c50 <timerRun>:

void timerRun(){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e01c      	b.n	8000c96 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <timerRun+0x58>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd13      	ble.n	8000c90 <timerRun+0x40>
			timer_counter[i]--;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <timerRun+0x58>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <timerRun+0x58>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <timerRun+0x58>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dc04      	bgt.n	8000c90 <timerRun+0x40>
				timer_flag[i] = 1;
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <timerRun+0x5c>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	dddf      	ble.n	8000c5c <timerRun+0xc>
			}
		}
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000284 	.word	0x20000284
 8000cac:	20000290 	.word	0x20000290

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_MspInit+0x40>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0x7c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d129      	bne.n	8000d68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d44:	2301      	movs	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d54:	f001 f85a 	bl	8001e0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2012      	movs	r0, #18
 8000d5e:	f000 ff6e 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d62:	2012      	movs	r0, #18
 8000d64:	f000 ff87 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012400 	.word	0x40012400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d113      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_TIM_Base_MspInit+0x44>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_TIM_Base_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_TIM_Base_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	201c      	movs	r0, #28
 8000dac:	f000 ff47 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db0:	201c      	movs	r0, #28
 8000db2:	f000 ff60 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_UART_MspInit+0x98>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d137      	bne.n	8000e54 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	61d3      	str	r3, [r2, #28]
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x9c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e14:	2304      	movs	r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e28:	f000 fff0 	bl	8001e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <HAL_UART_MspInit+0xa0>)
 8000e40:	f000 ffe4 	bl	8001e0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2026      	movs	r0, #38	; 0x26
 8000e4a:	f000 fef8 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e4e:	2026      	movs	r0, #38	; 0x26
 8000e50:	f000 ff11 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f8c9 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <ADC1_2_IRQHandler+0x10>)
 8000ebe:	f000 fb75 	bl	80015ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000008c 	.word	0x2000008c

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f001 ff91 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000bc 	.word	0x200000bc

08000ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART2_IRQHandler+0x10>)
 8000ee6:	f002 fbdf 	bl	80036a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000104 	.word	0x20000104

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f002 ffe8 	bl	8003ef8 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20002800 	.word	0x20002800
 8000f54:	00000400 	.word	0x00000400
 8000f58:	2000029c 	.word	0x2000029c
 8000f5c:	200002b8 	.word	0x200002b8

08000f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f92:	f7ff ffe5 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 ffb5 	bl	8003f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9a:	f7ff fa2d 	bl	80003f8 <main>
  bx lr
 8000f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fa8:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 8000fac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fb0:	200002b4 	.word	0x200002b4

08000fb4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <CAN1_RX1_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 fe2d 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe6c 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fe45 	bl	8001c92 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 fe0d 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000008 	.word	0x20000008
 8001064:	200002a0 	.word	0x200002a0

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	200002a0 	.word	0x200002a0

0800107c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0be      	b.n	800121c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d109      	bne.n	80010c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe1a 	bl	8000cf4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fc9b 	bl	80019fc <ADC_ConversionStop_Disable>
 80010c6:	4603      	mov	r3, r0
 80010c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 8099 	bne.w	800120a <HAL_ADC_Init+0x18e>
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 8095 	bne.w	800120a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e8:	f023 0302 	bic.w	r3, r3, #2
 80010ec:	f043 0202 	orr.w	r2, r3, #2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7b1b      	ldrb	r3, [r3, #12]
 8001102:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001104:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4313      	orrs	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d003      	beq.n	800111e <HAL_ADC_Init+0xa2>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d102      	bne.n	8001124 <HAL_ADC_Init+0xa8>
 800111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001122:	e000      	b.n	8001126 <HAL_ADC_Init+0xaa>
 8001124:	2300      	movs	r3, #0
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7d1b      	ldrb	r3, [r3, #20]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d119      	bne.n	8001168 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7b1b      	ldrb	r3, [r3, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	3b01      	subs	r3, #1
 8001142:	035a      	lsls	r2, r3, #13
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	e00b      	b.n	8001168 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f043 0220 	orr.w	r2, r3, #32
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	f043 0201 	orr.w	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_ADC_Init+0x1a8>)
 8001184:	4013      	ands	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	430b      	orrs	r3, r1
 800118e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001198:	d003      	beq.n	80011a2 <HAL_ADC_Init+0x126>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d104      	bne.n	80011ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	051b      	lsls	r3, r3, #20
 80011aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	430a      	orrs	r2, r1
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_ADC_Init+0x1ac>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d10b      	bne.n	80011e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f023 0303 	bic.w	r3, r3, #3
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e6:	e018      	b.n	800121a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f023 0312 	bic.w	r3, r3, #18
 80011f0:	f043 0210 	orr.w	r2, r3, #16
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001208:	e007      	b.n	800121a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f043 0210 	orr.w	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800121a:	7dfb      	ldrb	r3, [r7, #23]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	ffe1f7fd 	.word	0xffe1f7fd
 8001228:	ff1f0efe 	.word	0xff1f0efe

0800122c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Start+0x1a>
 8001242:	2302      	movs	r3, #2
 8001244:	e098      	b.n	8001378 <HAL_ADC_Start+0x14c>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fb7a 	bl	8001948 <ADC_Enable>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 8087 	bne.w	800136e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a41      	ldr	r2, [pc, #260]	; (8001380 <HAL_ADC_Start+0x154>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d105      	bne.n	800128a <HAL_ADC_Start+0x5e>
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_ADC_Start+0x158>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d026      	beq.n	80012f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012b4:	e01d      	b.n	80012f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <HAL_ADC_Start+0x158>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_Start+0xaa>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <HAL_ADC_Start+0x154>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10d      	bne.n	80012f2 <HAL_ADC_Start+0xc6>
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_ADC_Start+0x158>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	f023 0206 	bic.w	r2, r3, #6
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	e002      	b.n	8001312 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f06f 0202 	mvn.w	r2, #2
 8001322:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800132e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001332:	d113      	bne.n	800135c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_ADC_Start+0x154>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d105      	bne.n	800134a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_ADC_Start+0x158>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	e00c      	b.n	8001376 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e003      	b.n	8001376 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40012800 	.word	0x40012800
 8001384:	40012400 	.word	0x40012400

08001388 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800139e:	f7ff fe63 	bl	8001068 <HAL_GetTick>
 80013a2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0d3      	b.n	8001572 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d131      	bne.n	800143c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d12a      	bne.n	800143c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013e6:	e021      	b.n	800142c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ee:	d01d      	beq.n	800142c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_ADC_PollForConversion+0x7e>
 80013f6:	f7ff fe37 	bl	8001068 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d212      	bcs.n	800142c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10b      	bne.n	800142c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f043 0204 	orr.w	r2, r3, #4
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0a2      	b.n	8001572 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0d6      	beq.n	80013e8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800143a:	e070      	b.n	800151e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_ADC_PollForConversion+0x1f4>)
 800143e:	681c      	ldr	r4, [r3, #0]
 8001440:	2002      	movs	r0, #2
 8001442:	f001 fb7d 	bl	8002b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8001446:	4603      	mov	r3, r0
 8001448:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_ADC_PollForConversion+0x1f8>)
 8001454:	400b      	ands	r3, r1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_ADC_PollForConversion+0x104>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	4b48      	ldr	r3, [pc, #288]	; (8001584 <HAL_ADC_PollForConversion+0x1fc>)
 8001462:	400b      	ands	r3, r1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <HAL_ADC_PollForConversion+0x104>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_ADC_PollForConversion+0x200>)
 8001470:	400b      	ands	r3, r1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d108      	bne.n	8001488 <HAL_ADC_PollForConversion+0x100>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_ADC_PollForConversion+0x204>)
 800147e:	400b      	ands	r3, r1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_ADC_PollForConversion+0x100>
 8001484:	2314      	movs	r3, #20
 8001486:	e020      	b.n	80014ca <HAL_ADC_PollForConversion+0x142>
 8001488:	2329      	movs	r3, #41	; 0x29
 800148a:	e01e      	b.n	80014ca <HAL_ADC_PollForConversion+0x142>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6919      	ldr	r1, [r3, #16]
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_ADC_PollForConversion+0x200>)
 8001494:	400b      	ands	r3, r1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x120>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68d9      	ldr	r1, [r3, #12]
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_ADC_PollForConversion+0x204>)
 80014a2:	400b      	ands	r3, r1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <HAL_ADC_PollForConversion+0x13c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6919      	ldr	r1, [r3, #16]
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_ADC_PollForConversion+0x208>)
 80014b0:	400b      	ands	r3, r1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x140>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68d9      	ldr	r1, [r3, #12]
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_ADC_PollForConversion+0x208>)
 80014be:	400b      	ands	r3, r1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x140>
 80014c4:	2354      	movs	r3, #84	; 0x54
 80014c6:	e000      	b.n	80014ca <HAL_ADC_PollForConversion+0x142>
 80014c8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014d0:	e021      	b.n	8001516 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d01a      	beq.n	8001510 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <HAL_ADC_PollForConversion+0x168>
 80014e0:	f7ff fdc2 	bl	8001068 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d20f      	bcs.n	8001510 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d90b      	bls.n	8001510 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f043 0204 	orr.w	r2, r3, #4
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e030      	b.n	8001572 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	429a      	cmp	r2, r3
 800151c:	d8d9      	bhi.n	80014d2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f06f 0212 	mvn.w	r2, #18
 8001526:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800153e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001542:	d115      	bne.n	8001570 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000
 8001580:	24924924 	.word	0x24924924
 8001584:	00924924 	.word	0x00924924
 8001588:	12492492 	.word	0x12492492
 800158c:	00492492 	.word	0x00492492
 8001590:	00249249 	.word	0x00249249

08001594 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d140      	bne.n	8001644 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d139      	bne.n	8001644 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015f6:	d11d      	bne.n	8001634 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d119      	bne.n	8001634 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0220 	bic.w	r2, r2, #32
 800160e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f87c 	bl	8001732 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f06f 0212 	mvn.w	r2, #18
 8001642:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b80      	cmp	r3, #128	; 0x80
 8001650:	d14f      	bne.n	80016f2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d148      	bne.n	80016f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001682:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001686:	d012      	beq.n	80016ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001692:	2b00      	cmp	r3, #0
 8001694:	d125      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016a4:	d11d      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f9cb 	bl	8001a7e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 020c 	mvn.w	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	d114      	bne.n	800172a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10d      	bne.n	800172a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f812 	bl	8001744 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0201 	mvn.w	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x20>
 8001774:	2302      	movs	r3, #2
 8001776:	e0dc      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1da>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d81c      	bhi.n	80017c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b05      	subs	r3, #5
 800179a:	221f      	movs	r2, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b05      	subs	r3, #5
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
 80017c0:	e03c      	b.n	800183c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d81c      	bhi.n	8001804 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b23      	subs	r3, #35	; 0x23
 80017dc:	221f      	movs	r2, #31
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	4019      	ands	r1, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	e01b      	b.n	800183c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b41      	subs	r3, #65	; 0x41
 8001816:	221f      	movs	r2, #31
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	4019      	ands	r1, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b41      	subs	r3, #65	; 0x41
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d91c      	bls.n	800187e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	3b1e      	subs	r3, #30
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	3b1e      	subs	r3, #30
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	e019      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6919      	ldr	r1, [r3, #16]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	2207      	movs	r2, #7
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6898      	ldr	r0, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d132      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_ADC_ConfigChannel+0x1e4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d125      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d126      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d11a      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_ADC_ConfigChannel+0x1e8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <HAL_ADC_ConfigChannel+0x1ec>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	0c9a      	lsrs	r2, r3, #18
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001908:	e002      	b.n	8001910 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3b01      	subs	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f9      	bne.n	800190a <HAL_ADC_ConfigChannel+0x1b2>
 8001916:	e007      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f043 0220 	orr.w	r2, r3, #32
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40012400 	.word	0x40012400
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d040      	beq.n	80019e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <ADC_Enable+0xac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <ADC_Enable+0xb0>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	0c9b      	lsrs	r3, r3, #18
 8001982:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001984:	e002      	b.n	800198c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3b01      	subs	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001992:	f7ff fb69 	bl	8001068 <HAL_GetTick>
 8001996:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001998:	e01f      	b.n	80019da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800199a:	f7ff fb65 	bl	8001068 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d918      	bls.n	80019da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d011      	beq.n	80019da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d1d8      	bne.n	800199a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000
 80019f8:	431bde83 	.word	0x431bde83

080019fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d12e      	bne.n	8001a74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a26:	f7ff fb1f 	bl	8001068 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	e01b      	b.n	8001a66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a2e:	f7ff fb1b 	bl	8001068 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d914      	bls.n	8001a66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10d      	bne.n	8001a66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e007      	b.n	8001a76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d0dc      	beq.n	8001a2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <__NVIC_EnableIRQ+0x34>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff90 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff2d 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff90 	bl	8001b80 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e020      	b.n	8001d14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020e 	bic.w	r2, r2, #14
 8001ce0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d005      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2204      	movs	r2, #4
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e051      	b.n	8001de6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 020e 	bic.w	r2, r2, #14
 8001d50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <HAL_DMA_Abort_IT+0xd0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d029      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xa0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_DMA_Abort_IT+0xd4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d022      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x9c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_DMA_Abort_IT+0xd8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d01a      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x96>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_DMA_Abort_IT+0xdc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d012      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x90>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_DMA_Abort_IT+0xe0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00a      	beq.n	8001daa <HAL_DMA_Abort_IT+0x8a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_DMA_Abort_IT+0xe4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d102      	bne.n	8001da4 <HAL_DMA_Abort_IT+0x84>
 8001d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001da2:	e00e      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da8:	e00b      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dae:	e008      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	e005      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dba:	e002      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	e000      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xa2>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_DMA_Abort_IT+0xe8>)
 8001dc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
    } 
  }
  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40020008 	.word	0x40020008
 8001df4:	4002001c 	.word	0x4002001c
 8001df8:	40020030 	.word	0x40020030
 8001dfc:	40020044 	.word	0x40020044
 8001e00:	40020058 	.word	0x40020058
 8001e04:	4002006c 	.word	0x4002006c
 8001e08:	40020000 	.word	0x40020000

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e161      	b.n	80020e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e20:	2201      	movs	r2, #1
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8150 	bne.w	80020de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a97      	ldr	r2, [pc, #604]	; (80020a0 <HAL_GPIO_Init+0x294>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d05e      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e48:	4a95      	ldr	r2, [pc, #596]	; (80020a0 <HAL_GPIO_Init+0x294>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d875      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e4e:	4a95      	ldr	r2, [pc, #596]	; (80020a4 <HAL_GPIO_Init+0x298>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d058      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e54:	4a93      	ldr	r2, [pc, #588]	; (80020a4 <HAL_GPIO_Init+0x298>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d86f      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e5a:	4a93      	ldr	r2, [pc, #588]	; (80020a8 <HAL_GPIO_Init+0x29c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d052      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e60:	4a91      	ldr	r2, [pc, #580]	; (80020a8 <HAL_GPIO_Init+0x29c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d869      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e66:	4a91      	ldr	r2, [pc, #580]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d04c      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a8f      	ldr	r2, [pc, #572]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d863      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e72:	4a8f      	ldr	r2, [pc, #572]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d046      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e78:	4a8d      	ldr	r2, [pc, #564]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d85d      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d82a      	bhi.n	8001ed8 <HAL_GPIO_Init+0xcc>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d859      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <HAL_GPIO_Init+0x80>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001ee1 	.word	0x08001ee1
 8001e94:	08001ef3 	.word	0x08001ef3
 8001e98:	08001f35 	.word	0x08001f35
 8001e9c:	08001f3b 	.word	0x08001f3b
 8001ea0:	08001f3b 	.word	0x08001f3b
 8001ea4:	08001f3b 	.word	0x08001f3b
 8001ea8:	08001f3b 	.word	0x08001f3b
 8001eac:	08001f3b 	.word	0x08001f3b
 8001eb0:	08001f3b 	.word	0x08001f3b
 8001eb4:	08001f3b 	.word	0x08001f3b
 8001eb8:	08001f3b 	.word	0x08001f3b
 8001ebc:	08001f3b 	.word	0x08001f3b
 8001ec0:	08001f3b 	.word	0x08001f3b
 8001ec4:	08001f3b 	.word	0x08001f3b
 8001ec8:	08001f3b 	.word	0x08001f3b
 8001ecc:	08001f3b 	.word	0x08001f3b
 8001ed0:	08001ee9 	.word	0x08001ee9
 8001ed4:	08001efd 	.word	0x08001efd
 8001ed8:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ede:	e02c      	b.n	8001f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e029      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	3304      	adds	r3, #4
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e024      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e01f      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	330c      	adds	r3, #12
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e01a      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e013      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	611a      	str	r2, [r3, #16]
          break;
 8001f26:	e009      	b.n	8001f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	615a      	str	r2, [r3, #20]
          break;
 8001f32:	e003      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          break;
 8001f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d801      	bhi.n	8001f46 <HAL_GPIO_Init+0x13a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_Init+0x13e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d802      	bhi.n	8001f58 <HAL_GPIO_Init+0x14c>
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x152>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	3b08      	subs	r3, #8
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	210f      	movs	r1, #15
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	401a      	ands	r2, r3
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80a9 	beq.w	80020de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a49      	ldr	r2, [pc, #292]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa4:	4a45      	ldr	r2, [pc, #276]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3d      	ldr	r2, [pc, #244]	; (80020c0 <HAL_GPIO_Init+0x2b4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1e0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1dc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1d8>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1e2>
 8001fec:	2300      	movs	r3, #0
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffe:	492f      	ldr	r1, [pc, #188]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	492b      	ldr	r1, [pc, #172]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4927      	ldr	r1, [pc, #156]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002030:	4013      	ands	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4921      	ldr	r1, [pc, #132]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	491d      	ldr	r1, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002058:	4013      	ands	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	43db      	mvns	r3, r3
 800207e:	4913      	ldr	r1, [pc, #76]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002080:	4013      	ands	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01f      	beq.n	80020d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	490d      	ldr	r1, [pc, #52]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	60cb      	str	r3, [r1, #12]
 800209c:	e01f      	b.n	80020de <HAL_GPIO_Init+0x2d2>
 800209e:	bf00      	nop
 80020a0:	10320000 	.word	0x10320000
 80020a4:	10310000 	.word	0x10310000
 80020a8:	10220000 	.word	0x10220000
 80020ac:	10210000 	.word	0x10210000
 80020b0:	10120000 	.word	0x10120000
 80020b4:	10110000 	.word	0x10110000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40010800 	.word	0x40010800
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40011000 	.word	0x40011000
 80020cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_GPIO_Init+0x2f4>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4909      	ldr	r1, [pc, #36]	; (8002100 <HAL_GPIO_Init+0x2f4>)
 80020da:	4013      	ands	r3, r2
 80020dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f47f ae96 	bne.w	8001e20 <HAL_GPIO_Init+0x14>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	372c      	adds	r7, #44	; 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43d9      	mvns	r1, r3
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	400b      	ands	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_PWR_EnterSLEEPMode+0x34>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002186:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002188:	e002      	b.n	8002190 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800218a:	bf40      	sev
    __WFE();
 800218c:	bf20      	wfe
    __WFE();
 800218e:	bf20      	wfe
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e272      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8087 	beq.w	80022ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d00c      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021cc:	4b8f      	ldr	r3, [pc, #572]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d112      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
 80021d8:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d10b      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e6:	4b89      	ldr	r3, [pc, #548]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d06c      	beq.n	80022cc <HAL_RCC_OscConfig+0x12c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d168      	bne.n	80022cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e24c      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x76>
 8002208:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7f      	ldr	r2, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e02e      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b78      	ldr	r3, [pc, #480]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a77      	ldr	r2, [pc, #476]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0xbc>
 8002242:	4b72      	ldr	r3, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a71      	ldr	r2, [pc, #452]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 800225c:	4b6b      	ldr	r3, [pc, #428]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a67      	ldr	r2, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fef4 	bl	8001068 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fef0 	bl	8001068 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e200      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xe4>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fee0 	bl	8001068 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe fedc 	bl	8001068 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1ec      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x10c>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022da:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
 80022f2:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d116      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1c0      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4939      	ldr	r1, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e03a      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fe95 	bl	8001068 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe fe91 	bl	8001068 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1a1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fe74 	bl	8001068 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7fe fe70 	bl	8001068 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e180      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d03a      	beq.n	8002424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fe54 	bl	8001068 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe fe50 	bl	8001068 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e160      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f000 fad8 	bl	8002998 <RCC_Delay>
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe fe3a 	bl	8001068 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	e00f      	b.n	8002418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe fe36 	bl	8001068 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d908      	bls.n	8002418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e146      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	42420000 	.word	0x42420000
 8002414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e9      	bne.n	80023f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a6 	beq.w	800257e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10d      	bne.n	800245e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a87      	ldr	r2, [pc, #540]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7e      	ldr	r2, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002476:	f7fe fdf7 	bl	8001068 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7fe fdf3 	bl	8001068 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e103      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b75      	ldr	r3, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x312>
 80024a4:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e02d      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024ba:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a66      	ldr	r2, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e01c      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d10c      	bne.n	80024f6 <HAL_RCC_OscConfig+0x356>
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a60      	ldr	r2, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	e00b      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a5a      	ldr	r2, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d015      	beq.n	8002542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fda7 	bl	8001068 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe fda3 	bl	8001068 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0b1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ee      	beq.n	800251e <HAL_RCC_OscConfig+0x37e>
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fd91 	bl	8001068 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fd8d 	bl	8001068 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e09b      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ee      	bne.n	800254a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d061      	beq.n	8002658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d146      	bne.n	800262a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd61 	bl	8001068 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fd5d 	bl	8001068 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e06d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4921      	ldr	r1, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a19      	ldr	r1, [r3, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	430b      	orrs	r3, r1
 80025f6:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fd31 	bl	8001068 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fd2d 	bl	8001068 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e03d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x46a>
 8002628:	e035      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fd1a 	bl	8001068 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fd16 	bl	8001068 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x498>
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e019      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x500>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0d0      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4965      	ldr	r1, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d040      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e073      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4936      	ldr	r1, [pc, #216]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fe fc68 	bl	8001068 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fc64 	bl	8001068 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e053      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d210      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4922      	ldr	r1, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1cc>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fbc6 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08004898 	.word	0x08004898
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b490      	push	{r4, r7}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_RCC_GetSysClockFreq+0xac>)
 8002880:	1d3c      	adds	r4, r7, #4
 8002882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002888:	f240 2301 	movw	r3, #513	; 0x201
 800288c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x46>
 80028b6:	e02b      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ba:	623b      	str	r3, [r7, #32]
      break;
 80028bc:	e02b      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3328      	adds	r3, #40	; 0x28
 80028c8:	443b      	add	r3, r7
 80028ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	3328      	adds	r3, #40	; 0x28
 80028e6:	443b      	add	r3, r7
 80028e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	623b      	str	r3, [r7, #32]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	6a3b      	ldr	r3, [r7, #32]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc90      	pop	{r4, r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	08004878 	.word	0x08004878
 8002928:	40021000 	.word	0x40021000
 800292c:	007a1200 	.word	0x007a1200
 8002930:	003d0900 	.word	0x003d0900

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b02      	ldr	r3, [pc, #8]	; (8002944 <HAL_RCC_GetHCLKFreq+0x10>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff2 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	080048a8 	.word	0x080048a8

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffde 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0adb      	lsrs	r3, r3, #11
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	080048a8 	.word	0x080048a8

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000000 	.word	0x20000000
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d07d      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	61d3      	str	r3, [r2, #28]
 8002a0c:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d118      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fb18 	bl	8001068 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	e008      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3c:	f7fe fb14 	bl	8001068 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e06d      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d027      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d014      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fae3 	bl	8001068 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fadf 	bl	8001068 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e036      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4917      	ldr	r1, [pc, #92]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	490b      	ldr	r1, [pc, #44]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42420440 	.word	0x42420440

08002b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b08d      	sub	sp, #52	; 0x34
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002b4a:	f107 040c 	add.w	r4, r7, #12
 8002b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b54:	f240 2301 	movw	r3, #513	; 0x201
 8002b58:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	f200 808e 	bhi.w	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d049      	beq.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d079      	beq.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b88:	e086      	b.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b90:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d07f      	beq.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	3330      	adds	r3, #48	; 0x30
 8002ba6:	443b      	add	r3, r7
 8002ba8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bac:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d017      	beq.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bb8:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c5b      	lsrs	r3, r3, #17
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	3330      	adds	r3, #48	; 0x30
 8002bc4:	443b      	add	r3, r7
 8002bc6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bd6:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	e004      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c04:	e04a      	b.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c14:	e042      	b.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c26:	d108      	bne.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c38:	e01f      	b.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d109      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002c52:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c58:	e00f      	b.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002c72:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c78:	e012      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002c7a:	e011      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c7c:	f7ff fe78 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0b9b      	lsrs	r3, r3, #14
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c96:	e004      	b.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ca0:	bf00      	nop
    }
  }
  return (frequency);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3734      	adds	r7, #52	; 0x34
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	08004888 	.word	0x08004888
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	007a1200 	.word	0x007a1200
 8002cb8:	003d0900 	.word	0x003d0900
 8002cbc:	aaaaaaab 	.word	0xaaaaaaab

08002cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e041      	b.n	8002d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe f848 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f000 fa6a 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e035      	b.n	8002de4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_TIM_Base_Start_IT+0x90>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIM_Base_Start_IT+0x4e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d004      	beq.n	8002dae <HAL_TIM_Base_Start_IT+0x4e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_TIM_Base_Start_IT+0x94>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d010      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd0:	e007      	b.n	8002de2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400

08002df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0202 	mvn.w	r2, #2
 8002e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9b1 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9a4 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9b3 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0204 	mvn.w	r2, #4
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f987 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f97a 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f989 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0208 	mvn.w	r2, #8
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f95d 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f950 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f95f 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f933 	bl	80031a2 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f926 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f935 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0201 	mvn.w	r2, #1
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fbd6 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa67 	bl	8003476 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8f9 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d10e      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d107      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0220 	mvn.w	r2, #32
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa32 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIM_ConfigClockSource+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e0b3      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x180>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800303e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003046:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003058:	d03e      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xd0>
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305e:	f200 8087 	bhi.w	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	f000 8085 	beq.w	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d87f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d01a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xa2>
 8003074:	2b70      	cmp	r3, #112	; 0x70
 8003076:	d87b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003078:	2b60      	cmp	r3, #96	; 0x60
 800307a:	d050      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x116>
 800307c:	2b60      	cmp	r3, #96	; 0x60
 800307e:	d877      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d03c      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xf6>
 8003084:	2b50      	cmp	r3, #80	; 0x50
 8003086:	d873      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d058      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x136>
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d86f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003090:	2b30      	cmp	r3, #48	; 0x30
 8003092:	d064      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x156>
 8003094:	2b30      	cmp	r3, #48	; 0x30
 8003096:	d86b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d060      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x156>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d867      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d05c      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x156>
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d05a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030a8:	e062      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f000 f95c 	bl	8003376 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	609a      	str	r2, [r3, #8]
      break;
 80030d6:	e04e      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f000 f945 	bl	8003376 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fa:	609a      	str	r2, [r3, #8]
      break;
 80030fc:	e03b      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	f000 f8bc 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2150      	movs	r1, #80	; 0x50
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f913 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 800311c:	e02b      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f8da 	bl	80032e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2160      	movs	r1, #96	; 0x60
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f903 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 800313c:	e01b      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f000 f89c 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2140      	movs	r1, #64	; 0x40
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f8f3 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 800315c:	e00b      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f000 f8ea 	bl	8003342 <TIM_ITRx_SetConfig>
        break;
 800316e:	e002      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003174:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <TIM_Base_SetConfig+0xa8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x28>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x28>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <TIM_Base_SetConfig+0xac>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <TIM_Base_SetConfig+0xa8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0x52>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0x52>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <TIM_Base_SetConfig+0xac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a07      	ldr	r2, [pc, #28]	; (8003280 <TIM_Base_SetConfig+0xa8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40000400 	.word	0x40000400

08003288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 030a 	bic.w	r3, r3, #10
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 0210 	bic.w	r2, r3, #16
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800330e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	f043 0307 	orr.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b087      	sub	sp, #28
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e041      	b.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d004      	beq.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a10      	ldr	r2, [pc, #64]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10c      	bne.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800342a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e03f      	b.n	800351a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fc88 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	; 0x24
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fc85 	bl	8003ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08a      	sub	sp, #40	; 0x28
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d17c      	bne.n	800363c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_Transmit+0x2c>
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e075      	b.n	800363e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UART_Transmit+0x3e>
 800355c:	2302      	movs	r3, #2
 800355e:	e06e      	b.n	800363e <HAL_UART_Transmit+0x11c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003576:	f7fd fd77 	bl	8001068 <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d108      	bne.n	80035a4 <HAL_UART_Transmit+0x82>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e003      	b.n	80035ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035b4:	e02a      	b.n	800360c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fa38 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e036      	b.n	800363e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e007      	b.n	80035fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1cf      	bne.n	80035b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fa08 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e006      	b.n	800363e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	d11d      	bne.n	800369c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_UART_Receive_IT+0x26>
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e016      	b.n	800369e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Receive_IT+0x38>
 800367a:	2302      	movs	r3, #2
 800367c:	e00f      	b.n	800369e <HAL_UART_Receive_IT+0x58>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	461a      	mov	r2, r3
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fa19 	bl	8003aca <UART_Start_Receive_IT>
 8003698:	4603      	mov	r3, r0
 800369a:	e000      	b.n	800369e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_UART_IRQHandler+0x52>
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fac9 	bl	8003c8a <UART_Receive_IT>
      return;
 80036f8:	e17b      	b.n	80039f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80b1 	beq.w	8003864 <HAL_UART_IRQHandler+0x1bc>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_UART_IRQHandler+0x70>
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80a6 	beq.w	8003864 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_UART_IRQHandler+0x90>
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_UART_IRQHandler+0xb0>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0202 	orr.w	r2, r3, #2
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_UART_IRQHandler+0xd0>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00f      	beq.n	80037a2 <HAL_UART_IRQHandler+0xfa>
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <HAL_UART_IRQHandler+0xee>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0208 	orr.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 811e 	beq.w	80039e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_UART_IRQHandler+0x11e>
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa62 	bl	8003c8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_UART_IRQHandler+0x146>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d031      	beq.n	8003852 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9a4 	bl	8003b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003810:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d013      	beq.n	8003842 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	4a76      	ldr	r2, [pc, #472]	; (80039f8 <HAL_UART_IRQHandler+0x350>)
 8003820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fa7a 	bl	8001d20 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	e00e      	b.n	8003860 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8e3 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00a      	b.n	8003860 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8df 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e006      	b.n	8003860 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8db 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800385e:	e0c3      	b.n	80039e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	bf00      	nop
    return;
 8003862:	e0c1      	b.n	80039e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 80a1 	bne.w	80039b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 809b 	beq.w	80039b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8095 	beq.w	80039b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04e      	beq.n	8003948 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038b4:	8a3b      	ldrh	r3, [r7, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8098 	beq.w	80039ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c0:	8a3a      	ldrh	r2, [r7, #16]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	f080 8092 	bcs.w	80039ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8a3a      	ldrh	r2, [r7, #16]
 80038cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d02b      	beq.n	8003930 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003906:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0210 	bic.w	r2, r2, #16
 8003924:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe f9bd 	bl	8001caa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003938:	b29b      	uxth	r3, r3
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f86d 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003946:	e051      	b.n	80039ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003950:	b29b      	uxth	r3, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d047      	beq.n	80039f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003960:	8a7b      	ldrh	r3, [r7, #18]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d044      	beq.n	80039f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003974:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0210 	bic.w	r2, r2, #16
 80039a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a4:	8a7b      	ldrh	r3, [r7, #18]
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f839 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039ae:	e01f      	b.n	80039f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_UART_IRQHandler+0x324>
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8f9 	bl	8003bbc <UART_Transmit_IT>
    return;
 80039ca:	e012      	b.n	80039f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <HAL_UART_IRQHandler+0x34a>
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f93a 	bl	8003c5a <UART_EndTransmit_IT>
    return;
 80039e6:	e004      	b.n	80039f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039f0:	bf00      	nop
  }
}
 80039f2:	3728      	adds	r7, #40	; 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	08003b95 	.word	0x08003b95

080039fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e02c      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d028      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a56:	f7fd fb07 	bl	8001068 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d21d      	bcs.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0c3      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2222      	movs	r2, #34	; 0x22
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff2d 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b21      	cmp	r3, #33	; 0x21
 8003bce:	d13e      	bne.n	8003c4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d114      	bne.n	8003c04 <UART_Transmit_IT+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d110      	bne.n	8003c04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]
 8003c02:	e008      	b.n	8003c16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6211      	str	r1, [r2, #32]
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4619      	mov	r1, r3
 8003c24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff febe 	bl	80039fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b22      	cmp	r3, #34	; 0x22
 8003c9c:	f040 8099 	bne.w	8003dd2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d117      	bne.n	8003cda <UART_Receive_IT+0x50>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d113      	bne.n	8003cda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e026      	b.n	8003d28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d007      	beq.n	8003cfe <UART_Receive_IT+0x74>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <UART_Receive_IT+0x82>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e008      	b.n	8003d1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4619      	mov	r1, r3
 8003d36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d148      	bne.n	8003dce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0220 	bic.w	r2, r2, #32
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0210 	bic.w	r2, r2, #16
 8003d90:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d10a      	bne.n	8003db6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fe2f 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
 8003dc2:	e002      	b.n	8003dca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fc f9dd 	bl	8000184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e002      	b.n	8003dd4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e16:	f023 030c 	bic.w	r3, r3, #12
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <UART_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe fd94 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	e002      	b.n	8003e52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fd7c 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8003e50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	0119      	lsls	r1, r3, #4
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2064      	movs	r0, #100	; 0x64
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	; 0x32
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <UART_SetConfig+0x118>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea8:	4419      	add	r1, r3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <UART_SetConfig+0x118>)
 8003ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2064      	movs	r0, #100	; 0x64
 8003eca:	fb00 f303 	mul.w	r3, r0, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <UART_SetConfig+0x118>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	51eb851f 	.word	0x51eb851f

08003ef8 <__errno>:
 8003ef8:	4b01      	ldr	r3, [pc, #4]	; (8003f00 <__errno+0x8>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	2000000c 	.word	0x2000000c

08003f04 <__libc_init_array>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	2600      	movs	r6, #0
 8003f08:	4d0c      	ldr	r5, [pc, #48]	; (8003f3c <__libc_init_array+0x38>)
 8003f0a:	4c0d      	ldr	r4, [pc, #52]	; (8003f40 <__libc_init_array+0x3c>)
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	42a6      	cmp	r6, r4
 8003f12:	d109      	bne.n	8003f28 <__libc_init_array+0x24>
 8003f14:	f000 fc9c 	bl	8004850 <_init>
 8003f18:	2600      	movs	r6, #0
 8003f1a:	4d0a      	ldr	r5, [pc, #40]	; (8003f44 <__libc_init_array+0x40>)
 8003f1c:	4c0a      	ldr	r4, [pc, #40]	; (8003f48 <__libc_init_array+0x44>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	42a6      	cmp	r6, r4
 8003f24:	d105      	bne.n	8003f32 <__libc_init_array+0x2e>
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2c:	4798      	blx	r3
 8003f2e:	3601      	adds	r6, #1
 8003f30:	e7ee      	b.n	8003f10 <__libc_init_array+0xc>
 8003f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f36:	4798      	blx	r3
 8003f38:	3601      	adds	r6, #1
 8003f3a:	e7f2      	b.n	8003f22 <__libc_init_array+0x1e>
 8003f3c:	080048e4 	.word	0x080048e4
 8003f40:	080048e4 	.word	0x080048e4
 8003f44:	080048e4 	.word	0x080048e4
 8003f48:	080048e8 	.word	0x080048e8

08003f4c <memset>:
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4402      	add	r2, r0
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d100      	bne.n	8003f56 <memset+0xa>
 8003f54:	4770      	bx	lr
 8003f56:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5a:	e7f9      	b.n	8003f50 <memset+0x4>

08003f5c <siprintf>:
 8003f5c:	b40e      	push	{r1, r2, r3}
 8003f5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f62:	b500      	push	{lr}
 8003f64:	b09c      	sub	sp, #112	; 0x70
 8003f66:	ab1d      	add	r3, sp, #116	; 0x74
 8003f68:	9002      	str	r0, [sp, #8]
 8003f6a:	9006      	str	r0, [sp, #24]
 8003f6c:	9107      	str	r1, [sp, #28]
 8003f6e:	9104      	str	r1, [sp, #16]
 8003f70:	4808      	ldr	r0, [pc, #32]	; (8003f94 <siprintf+0x38>)
 8003f72:	4909      	ldr	r1, [pc, #36]	; (8003f98 <siprintf+0x3c>)
 8003f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f78:	9105      	str	r1, [sp, #20]
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	a902      	add	r1, sp, #8
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	f000 f868 	bl	8004054 <_svfiprintf_r>
 8003f84:	2200      	movs	r2, #0
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	b01c      	add	sp, #112	; 0x70
 8003f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f90:	b003      	add	sp, #12
 8003f92:	4770      	bx	lr
 8003f94:	2000000c 	.word	0x2000000c
 8003f98:	ffff0208 	.word	0xffff0208

08003f9c <__ssputs_r>:
 8003f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	688e      	ldr	r6, [r1, #8]
 8003fa2:	4682      	mov	sl, r0
 8003fa4:	429e      	cmp	r6, r3
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4690      	mov	r8, r2
 8003faa:	461f      	mov	r7, r3
 8003fac:	d838      	bhi.n	8004020 <__ssputs_r+0x84>
 8003fae:	898a      	ldrh	r2, [r1, #12]
 8003fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fb4:	d032      	beq.n	800401c <__ssputs_r+0x80>
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	6909      	ldr	r1, [r1, #16]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	eba5 0901 	sub.w	r9, r5, r1
 8003fc0:	6965      	ldr	r5, [r4, #20]
 8003fc2:	444b      	add	r3, r9
 8003fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fcc:	106d      	asrs	r5, r5, #1
 8003fce:	429d      	cmp	r5, r3
 8003fd0:	bf38      	it	cc
 8003fd2:	461d      	movcc	r5, r3
 8003fd4:	0553      	lsls	r3, r2, #21
 8003fd6:	d531      	bpl.n	800403c <__ssputs_r+0xa0>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f000 fb6f 	bl	80046bc <_malloc_r>
 8003fde:	4606      	mov	r6, r0
 8003fe0:	b950      	cbnz	r0, 8003ff8 <__ssputs_r+0x5c>
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	f8ca 3000 	str.w	r3, [sl]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	464a      	mov	r2, r9
 8003ffa:	6921      	ldr	r1, [r4, #16]
 8003ffc:	f000 face 	bl	800459c <memcpy>
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400a:	81a3      	strh	r3, [r4, #12]
 800400c:	6126      	str	r6, [r4, #16]
 800400e:	444e      	add	r6, r9
 8004010:	6026      	str	r6, [r4, #0]
 8004012:	463e      	mov	r6, r7
 8004014:	6165      	str	r5, [r4, #20]
 8004016:	eba5 0509 	sub.w	r5, r5, r9
 800401a:	60a5      	str	r5, [r4, #8]
 800401c:	42be      	cmp	r6, r7
 800401e:	d900      	bls.n	8004022 <__ssputs_r+0x86>
 8004020:	463e      	mov	r6, r7
 8004022:	4632      	mov	r2, r6
 8004024:	4641      	mov	r1, r8
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	f000 fac6 	bl	80045b8 <memmove>
 800402c:	68a3      	ldr	r3, [r4, #8]
 800402e:	2000      	movs	r0, #0
 8004030:	1b9b      	subs	r3, r3, r6
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	4433      	add	r3, r6
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	e7db      	b.n	8003ff4 <__ssputs_r+0x58>
 800403c:	462a      	mov	r2, r5
 800403e:	f000 fbb1 	bl	80047a4 <_realloc_r>
 8004042:	4606      	mov	r6, r0
 8004044:	2800      	cmp	r0, #0
 8004046:	d1e1      	bne.n	800400c <__ssputs_r+0x70>
 8004048:	4650      	mov	r0, sl
 800404a:	6921      	ldr	r1, [r4, #16]
 800404c:	f000 face 	bl	80045ec <_free_r>
 8004050:	e7c7      	b.n	8003fe2 <__ssputs_r+0x46>
	...

08004054 <_svfiprintf_r>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	4698      	mov	r8, r3
 800405a:	898b      	ldrh	r3, [r1, #12]
 800405c:	4607      	mov	r7, r0
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	460d      	mov	r5, r1
 8004062:	4614      	mov	r4, r2
 8004064:	b09d      	sub	sp, #116	; 0x74
 8004066:	d50e      	bpl.n	8004086 <_svfiprintf_r+0x32>
 8004068:	690b      	ldr	r3, [r1, #16]
 800406a:	b963      	cbnz	r3, 8004086 <_svfiprintf_r+0x32>
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	f000 fb25 	bl	80046bc <_malloc_r>
 8004072:	6028      	str	r0, [r5, #0]
 8004074:	6128      	str	r0, [r5, #16]
 8004076:	b920      	cbnz	r0, 8004082 <_svfiprintf_r+0x2e>
 8004078:	230c      	movs	r3, #12
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e0d1      	b.n	8004226 <_svfiprintf_r+0x1d2>
 8004082:	2340      	movs	r3, #64	; 0x40
 8004084:	616b      	str	r3, [r5, #20]
 8004086:	2300      	movs	r3, #0
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
 800408a:	2320      	movs	r3, #32
 800408c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004090:	2330      	movs	r3, #48	; 0x30
 8004092:	f04f 0901 	mov.w	r9, #1
 8004096:	f8cd 800c 	str.w	r8, [sp, #12]
 800409a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004240 <_svfiprintf_r+0x1ec>
 800409e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040a2:	4623      	mov	r3, r4
 80040a4:	469a      	mov	sl, r3
 80040a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040aa:	b10a      	cbz	r2, 80040b0 <_svfiprintf_r+0x5c>
 80040ac:	2a25      	cmp	r2, #37	; 0x25
 80040ae:	d1f9      	bne.n	80040a4 <_svfiprintf_r+0x50>
 80040b0:	ebba 0b04 	subs.w	fp, sl, r4
 80040b4:	d00b      	beq.n	80040ce <_svfiprintf_r+0x7a>
 80040b6:	465b      	mov	r3, fp
 80040b8:	4622      	mov	r2, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	4638      	mov	r0, r7
 80040be:	f7ff ff6d 	bl	8003f9c <__ssputs_r>
 80040c2:	3001      	adds	r0, #1
 80040c4:	f000 80aa 	beq.w	800421c <_svfiprintf_r+0x1c8>
 80040c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ca:	445a      	add	r2, fp
 80040cc:	9209      	str	r2, [sp, #36]	; 0x24
 80040ce:	f89a 3000 	ldrb.w	r3, [sl]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a2 	beq.w	800421c <_svfiprintf_r+0x1c8>
 80040d8:	2300      	movs	r3, #0
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040e2:	f10a 0a01 	add.w	sl, sl, #1
 80040e6:	9304      	str	r3, [sp, #16]
 80040e8:	9307      	str	r3, [sp, #28]
 80040ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ee:	931a      	str	r3, [sp, #104]	; 0x68
 80040f0:	4654      	mov	r4, sl
 80040f2:	2205      	movs	r2, #5
 80040f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f8:	4851      	ldr	r0, [pc, #324]	; (8004240 <_svfiprintf_r+0x1ec>)
 80040fa:	f000 fa41 	bl	8004580 <memchr>
 80040fe:	9a04      	ldr	r2, [sp, #16]
 8004100:	b9d8      	cbnz	r0, 800413a <_svfiprintf_r+0xe6>
 8004102:	06d0      	lsls	r0, r2, #27
 8004104:	bf44      	itt	mi
 8004106:	2320      	movmi	r3, #32
 8004108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800410c:	0711      	lsls	r1, r2, #28
 800410e:	bf44      	itt	mi
 8004110:	232b      	movmi	r3, #43	; 0x2b
 8004112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004116:	f89a 3000 	ldrb.w	r3, [sl]
 800411a:	2b2a      	cmp	r3, #42	; 0x2a
 800411c:	d015      	beq.n	800414a <_svfiprintf_r+0xf6>
 800411e:	4654      	mov	r4, sl
 8004120:	2000      	movs	r0, #0
 8004122:	f04f 0c0a 	mov.w	ip, #10
 8004126:	9a07      	ldr	r2, [sp, #28]
 8004128:	4621      	mov	r1, r4
 800412a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800412e:	3b30      	subs	r3, #48	; 0x30
 8004130:	2b09      	cmp	r3, #9
 8004132:	d94e      	bls.n	80041d2 <_svfiprintf_r+0x17e>
 8004134:	b1b0      	cbz	r0, 8004164 <_svfiprintf_r+0x110>
 8004136:	9207      	str	r2, [sp, #28]
 8004138:	e014      	b.n	8004164 <_svfiprintf_r+0x110>
 800413a:	eba0 0308 	sub.w	r3, r0, r8
 800413e:	fa09 f303 	lsl.w	r3, r9, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	46a2      	mov	sl, r4
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	e7d2      	b.n	80040f0 <_svfiprintf_r+0x9c>
 800414a:	9b03      	ldr	r3, [sp, #12]
 800414c:	1d19      	adds	r1, r3, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	9103      	str	r1, [sp, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	bfbb      	ittet	lt
 8004156:	425b      	neglt	r3, r3
 8004158:	f042 0202 	orrlt.w	r2, r2, #2
 800415c:	9307      	strge	r3, [sp, #28]
 800415e:	9307      	strlt	r3, [sp, #28]
 8004160:	bfb8      	it	lt
 8004162:	9204      	strlt	r2, [sp, #16]
 8004164:	7823      	ldrb	r3, [r4, #0]
 8004166:	2b2e      	cmp	r3, #46	; 0x2e
 8004168:	d10c      	bne.n	8004184 <_svfiprintf_r+0x130>
 800416a:	7863      	ldrb	r3, [r4, #1]
 800416c:	2b2a      	cmp	r3, #42	; 0x2a
 800416e:	d135      	bne.n	80041dc <_svfiprintf_r+0x188>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	3402      	adds	r4, #2
 8004174:	1d1a      	adds	r2, r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	9203      	str	r2, [sp, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	bfb8      	it	lt
 800417e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004244 <_svfiprintf_r+0x1f0>
 8004188:	2203      	movs	r2, #3
 800418a:	4650      	mov	r0, sl
 800418c:	7821      	ldrb	r1, [r4, #0]
 800418e:	f000 f9f7 	bl	8004580 <memchr>
 8004192:	b140      	cbz	r0, 80041a6 <_svfiprintf_r+0x152>
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	eba0 000a 	sub.w	r0, r0, sl
 800419a:	fa03 f000 	lsl.w	r0, r3, r0
 800419e:	9b04      	ldr	r3, [sp, #16]
 80041a0:	3401      	adds	r4, #1
 80041a2:	4303      	orrs	r3, r0
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041aa:	2206      	movs	r2, #6
 80041ac:	4826      	ldr	r0, [pc, #152]	; (8004248 <_svfiprintf_r+0x1f4>)
 80041ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041b2:	f000 f9e5 	bl	8004580 <memchr>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d038      	beq.n	800422c <_svfiprintf_r+0x1d8>
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <_svfiprintf_r+0x1f8>)
 80041bc:	bb1b      	cbnz	r3, 8004206 <_svfiprintf_r+0x1b2>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	3307      	adds	r3, #7
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	3308      	adds	r3, #8
 80041c8:	9303      	str	r3, [sp, #12]
 80041ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041cc:	4433      	add	r3, r6
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	e767      	b.n	80040a2 <_svfiprintf_r+0x4e>
 80041d2:	460c      	mov	r4, r1
 80041d4:	2001      	movs	r0, #1
 80041d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041da:	e7a5      	b.n	8004128 <_svfiprintf_r+0xd4>
 80041dc:	2300      	movs	r3, #0
 80041de:	f04f 0c0a 	mov.w	ip, #10
 80041e2:	4619      	mov	r1, r3
 80041e4:	3401      	adds	r4, #1
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	4620      	mov	r0, r4
 80041ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ee:	3a30      	subs	r2, #48	; 0x30
 80041f0:	2a09      	cmp	r2, #9
 80041f2:	d903      	bls.n	80041fc <_svfiprintf_r+0x1a8>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0c5      	beq.n	8004184 <_svfiprintf_r+0x130>
 80041f8:	9105      	str	r1, [sp, #20]
 80041fa:	e7c3      	b.n	8004184 <_svfiprintf_r+0x130>
 80041fc:	4604      	mov	r4, r0
 80041fe:	2301      	movs	r3, #1
 8004200:	fb0c 2101 	mla	r1, ip, r1, r2
 8004204:	e7f0      	b.n	80041e8 <_svfiprintf_r+0x194>
 8004206:	ab03      	add	r3, sp, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	462a      	mov	r2, r5
 800420c:	4638      	mov	r0, r7
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <_svfiprintf_r+0x1fc>)
 8004210:	a904      	add	r1, sp, #16
 8004212:	f3af 8000 	nop.w
 8004216:	1c42      	adds	r2, r0, #1
 8004218:	4606      	mov	r6, r0
 800421a:	d1d6      	bne.n	80041ca <_svfiprintf_r+0x176>
 800421c:	89ab      	ldrh	r3, [r5, #12]
 800421e:	065b      	lsls	r3, r3, #25
 8004220:	f53f af2c 	bmi.w	800407c <_svfiprintf_r+0x28>
 8004224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004226:	b01d      	add	sp, #116	; 0x74
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422c:	ab03      	add	r3, sp, #12
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	462a      	mov	r2, r5
 8004232:	4638      	mov	r0, r7
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <_svfiprintf_r+0x1fc>)
 8004236:	a904      	add	r1, sp, #16
 8004238:	f000 f87c 	bl	8004334 <_printf_i>
 800423c:	e7eb      	b.n	8004216 <_svfiprintf_r+0x1c2>
 800423e:	bf00      	nop
 8004240:	080048b0 	.word	0x080048b0
 8004244:	080048b6 	.word	0x080048b6
 8004248:	080048ba 	.word	0x080048ba
 800424c:	00000000 	.word	0x00000000
 8004250:	08003f9d 	.word	0x08003f9d

08004254 <_printf_common>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	4616      	mov	r6, r2
 800425a:	4699      	mov	r9, r3
 800425c:	688a      	ldr	r2, [r1, #8]
 800425e:	690b      	ldr	r3, [r1, #16]
 8004260:	4607      	mov	r7, r0
 8004262:	4293      	cmp	r3, r2
 8004264:	bfb8      	it	lt
 8004266:	4613      	movlt	r3, r2
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800426e:	460c      	mov	r4, r1
 8004270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004274:	b10a      	cbz	r2, 800427a <_printf_common+0x26>
 8004276:	3301      	adds	r3, #1
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	0699      	lsls	r1, r3, #26
 800427e:	bf42      	ittt	mi
 8004280:	6833      	ldrmi	r3, [r6, #0]
 8004282:	3302      	addmi	r3, #2
 8004284:	6033      	strmi	r3, [r6, #0]
 8004286:	6825      	ldr	r5, [r4, #0]
 8004288:	f015 0506 	ands.w	r5, r5, #6
 800428c:	d106      	bne.n	800429c <_printf_common+0x48>
 800428e:	f104 0a19 	add.w	sl, r4, #25
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	6832      	ldr	r2, [r6, #0]
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	42ab      	cmp	r3, r5
 800429a:	dc28      	bgt.n	80042ee <_printf_common+0x9a>
 800429c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042a0:	1e13      	subs	r3, r2, #0
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	bf18      	it	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	0692      	lsls	r2, r2, #26
 80042aa:	d42d      	bmi.n	8004308 <_printf_common+0xb4>
 80042ac:	4649      	mov	r1, r9
 80042ae:	4638      	mov	r0, r7
 80042b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d020      	beq.n	80042fc <_printf_common+0xa8>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	68e5      	ldr	r5, [r4, #12]
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf18      	it	ne
 80042c6:	2500      	movne	r5, #0
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	f04f 0600 	mov.w	r6, #0
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	bf08      	it	eq
 80042d2:	1aad      	subeq	r5, r5, r2
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	bf08      	it	eq
 80042d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfc4      	itt	gt
 80042e0:	1a9b      	subgt	r3, r3, r2
 80042e2:	18ed      	addgt	r5, r5, r3
 80042e4:	341a      	adds	r4, #26
 80042e6:	42b5      	cmp	r5, r6
 80042e8:	d11a      	bne.n	8004320 <_printf_common+0xcc>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e008      	b.n	8004300 <_printf_common+0xac>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	4649      	mov	r1, r9
 80042f4:	4638      	mov	r0, r7
 80042f6:	47c0      	blx	r8
 80042f8:	3001      	adds	r0, #1
 80042fa:	d103      	bne.n	8004304 <_printf_common+0xb0>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	3501      	adds	r5, #1
 8004306:	e7c4      	b.n	8004292 <_printf_common+0x3e>
 8004308:	2030      	movs	r0, #48	; 0x30
 800430a:	18e1      	adds	r1, r4, r3
 800430c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004316:	4422      	add	r2, r4
 8004318:	3302      	adds	r3, #2
 800431a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431e:	e7c5      	b.n	80042ac <_printf_common+0x58>
 8004320:	2301      	movs	r3, #1
 8004322:	4622      	mov	r2, r4
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d0e6      	beq.n	80042fc <_printf_common+0xa8>
 800432e:	3601      	adds	r6, #1
 8004330:	e7d9      	b.n	80042e6 <_printf_common+0x92>
	...

08004334 <_printf_i>:
 8004334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	7e0f      	ldrb	r7, [r1, #24]
 800433a:	4691      	mov	r9, r2
 800433c:	2f78      	cmp	r7, #120	; 0x78
 800433e:	4680      	mov	r8, r0
 8004340:	460c      	mov	r4, r1
 8004342:	469a      	mov	sl, r3
 8004344:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800434a:	d807      	bhi.n	800435c <_printf_i+0x28>
 800434c:	2f62      	cmp	r7, #98	; 0x62
 800434e:	d80a      	bhi.n	8004366 <_printf_i+0x32>
 8004350:	2f00      	cmp	r7, #0
 8004352:	f000 80d9 	beq.w	8004508 <_printf_i+0x1d4>
 8004356:	2f58      	cmp	r7, #88	; 0x58
 8004358:	f000 80a4 	beq.w	80044a4 <_printf_i+0x170>
 800435c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004364:	e03a      	b.n	80043dc <_printf_i+0xa8>
 8004366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800436a:	2b15      	cmp	r3, #21
 800436c:	d8f6      	bhi.n	800435c <_printf_i+0x28>
 800436e:	a101      	add	r1, pc, #4	; (adr r1, 8004374 <_printf_i+0x40>)
 8004370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004374:	080043cd 	.word	0x080043cd
 8004378:	080043e1 	.word	0x080043e1
 800437c:	0800435d 	.word	0x0800435d
 8004380:	0800435d 	.word	0x0800435d
 8004384:	0800435d 	.word	0x0800435d
 8004388:	0800435d 	.word	0x0800435d
 800438c:	080043e1 	.word	0x080043e1
 8004390:	0800435d 	.word	0x0800435d
 8004394:	0800435d 	.word	0x0800435d
 8004398:	0800435d 	.word	0x0800435d
 800439c:	0800435d 	.word	0x0800435d
 80043a0:	080044ef 	.word	0x080044ef
 80043a4:	08004411 	.word	0x08004411
 80043a8:	080044d1 	.word	0x080044d1
 80043ac:	0800435d 	.word	0x0800435d
 80043b0:	0800435d 	.word	0x0800435d
 80043b4:	08004511 	.word	0x08004511
 80043b8:	0800435d 	.word	0x0800435d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800435d 	.word	0x0800435d
 80043c4:	0800435d 	.word	0x0800435d
 80043c8:	080044d9 	.word	0x080044d9
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	1d1a      	adds	r2, r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	602a      	str	r2, [r5, #0]
 80043d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043dc:	2301      	movs	r3, #1
 80043de:	e0a4      	b.n	800452a <_printf_i+0x1f6>
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	6829      	ldr	r1, [r5, #0]
 80043e4:	0606      	lsls	r6, r0, #24
 80043e6:	f101 0304 	add.w	r3, r1, #4
 80043ea:	d50a      	bpl.n	8004402 <_printf_i+0xce>
 80043ec:	680e      	ldr	r6, [r1, #0]
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	da03      	bge.n	80043fc <_printf_i+0xc8>
 80043f4:	232d      	movs	r3, #45	; 0x2d
 80043f6:	4276      	negs	r6, r6
 80043f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fc:	230a      	movs	r3, #10
 80043fe:	485e      	ldr	r0, [pc, #376]	; (8004578 <_printf_i+0x244>)
 8004400:	e019      	b.n	8004436 <_printf_i+0x102>
 8004402:	680e      	ldr	r6, [r1, #0]
 8004404:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	bf18      	it	ne
 800440c:	b236      	sxthne	r6, r6
 800440e:	e7ef      	b.n	80043f0 <_printf_i+0xbc>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1d19      	adds	r1, r3, #4
 8004416:	6029      	str	r1, [r5, #0]
 8004418:	0601      	lsls	r1, r0, #24
 800441a:	d501      	bpl.n	8004420 <_printf_i+0xec>
 800441c:	681e      	ldr	r6, [r3, #0]
 800441e:	e002      	b.n	8004426 <_printf_i+0xf2>
 8004420:	0646      	lsls	r6, r0, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0xe8>
 8004424:	881e      	ldrh	r6, [r3, #0]
 8004426:	2f6f      	cmp	r7, #111	; 0x6f
 8004428:	bf0c      	ite	eq
 800442a:	2308      	moveq	r3, #8
 800442c:	230a      	movne	r3, #10
 800442e:	4852      	ldr	r0, [pc, #328]	; (8004578 <_printf_i+0x244>)
 8004430:	2100      	movs	r1, #0
 8004432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004436:	6865      	ldr	r5, [r4, #4]
 8004438:	2d00      	cmp	r5, #0
 800443a:	bfa8      	it	ge
 800443c:	6821      	ldrge	r1, [r4, #0]
 800443e:	60a5      	str	r5, [r4, #8]
 8004440:	bfa4      	itt	ge
 8004442:	f021 0104 	bicge.w	r1, r1, #4
 8004446:	6021      	strge	r1, [r4, #0]
 8004448:	b90e      	cbnz	r6, 800444e <_printf_i+0x11a>
 800444a:	2d00      	cmp	r5, #0
 800444c:	d04d      	beq.n	80044ea <_printf_i+0x1b6>
 800444e:	4615      	mov	r5, r2
 8004450:	fbb6 f1f3 	udiv	r1, r6, r3
 8004454:	fb03 6711 	mls	r7, r3, r1, r6
 8004458:	5dc7      	ldrb	r7, [r0, r7]
 800445a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800445e:	4637      	mov	r7, r6
 8004460:	42bb      	cmp	r3, r7
 8004462:	460e      	mov	r6, r1
 8004464:	d9f4      	bls.n	8004450 <_printf_i+0x11c>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d10b      	bne.n	8004482 <_printf_i+0x14e>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	07de      	lsls	r6, r3, #31
 800446e:	d508      	bpl.n	8004482 <_printf_i+0x14e>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	6861      	ldr	r1, [r4, #4]
 8004474:	4299      	cmp	r1, r3
 8004476:	bfde      	ittt	le
 8004478:	2330      	movle	r3, #48	; 0x30
 800447a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800447e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004482:	1b52      	subs	r2, r2, r5
 8004484:	6122      	str	r2, [r4, #16]
 8004486:	464b      	mov	r3, r9
 8004488:	4621      	mov	r1, r4
 800448a:	4640      	mov	r0, r8
 800448c:	f8cd a000 	str.w	sl, [sp]
 8004490:	aa03      	add	r2, sp, #12
 8004492:	f7ff fedf 	bl	8004254 <_printf_common>
 8004496:	3001      	adds	r0, #1
 8004498:	d14c      	bne.n	8004534 <_printf_i+0x200>
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	b004      	add	sp, #16
 80044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a4:	4834      	ldr	r0, [pc, #208]	; (8004578 <_printf_i+0x244>)
 80044a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044aa:	6829      	ldr	r1, [r5, #0]
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80044b2:	6029      	str	r1, [r5, #0]
 80044b4:	061d      	lsls	r5, r3, #24
 80044b6:	d514      	bpl.n	80044e2 <_printf_i+0x1ae>
 80044b8:	07df      	lsls	r7, r3, #31
 80044ba:	bf44      	itt	mi
 80044bc:	f043 0320 	orrmi.w	r3, r3, #32
 80044c0:	6023      	strmi	r3, [r4, #0]
 80044c2:	b91e      	cbnz	r6, 80044cc <_printf_i+0x198>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f023 0320 	bic.w	r3, r3, #32
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2310      	movs	r3, #16
 80044ce:	e7af      	b.n	8004430 <_printf_i+0xfc>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	2378      	movs	r3, #120	; 0x78
 80044da:	4828      	ldr	r0, [pc, #160]	; (800457c <_printf_i+0x248>)
 80044dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044e0:	e7e3      	b.n	80044aa <_printf_i+0x176>
 80044e2:	0659      	lsls	r1, r3, #25
 80044e4:	bf48      	it	mi
 80044e6:	b2b6      	uxthmi	r6, r6
 80044e8:	e7e6      	b.n	80044b8 <_printf_i+0x184>
 80044ea:	4615      	mov	r5, r2
 80044ec:	e7bb      	b.n	8004466 <_printf_i+0x132>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	6826      	ldr	r6, [r4, #0]
 80044f2:	1d18      	adds	r0, r3, #4
 80044f4:	6961      	ldr	r1, [r4, #20]
 80044f6:	6028      	str	r0, [r5, #0]
 80044f8:	0635      	lsls	r5, r6, #24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	d501      	bpl.n	8004502 <_printf_i+0x1ce>
 80044fe:	6019      	str	r1, [r3, #0]
 8004500:	e002      	b.n	8004508 <_printf_i+0x1d4>
 8004502:	0670      	lsls	r0, r6, #25
 8004504:	d5fb      	bpl.n	80044fe <_printf_i+0x1ca>
 8004506:	8019      	strh	r1, [r3, #0]
 8004508:	2300      	movs	r3, #0
 800450a:	4615      	mov	r5, r2
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	e7ba      	b.n	8004486 <_printf_i+0x152>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	2100      	movs	r1, #0
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	602a      	str	r2, [r5, #0]
 8004518:	681d      	ldr	r5, [r3, #0]
 800451a:	6862      	ldr	r2, [r4, #4]
 800451c:	4628      	mov	r0, r5
 800451e:	f000 f82f 	bl	8004580 <memchr>
 8004522:	b108      	cbz	r0, 8004528 <_printf_i+0x1f4>
 8004524:	1b40      	subs	r0, r0, r5
 8004526:	6060      	str	r0, [r4, #4]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	2300      	movs	r3, #0
 800452e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004532:	e7a8      	b.n	8004486 <_printf_i+0x152>
 8004534:	462a      	mov	r2, r5
 8004536:	4649      	mov	r1, r9
 8004538:	4640      	mov	r0, r8
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	47d0      	blx	sl
 800453e:	3001      	adds	r0, #1
 8004540:	d0ab      	beq.n	800449a <_printf_i+0x166>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	079b      	lsls	r3, r3, #30
 8004546:	d413      	bmi.n	8004570 <_printf_i+0x23c>
 8004548:	68e0      	ldr	r0, [r4, #12]
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	4298      	cmp	r0, r3
 800454e:	bfb8      	it	lt
 8004550:	4618      	movlt	r0, r3
 8004552:	e7a4      	b.n	800449e <_printf_i+0x16a>
 8004554:	2301      	movs	r3, #1
 8004556:	4632      	mov	r2, r6
 8004558:	4649      	mov	r1, r9
 800455a:	4640      	mov	r0, r8
 800455c:	47d0      	blx	sl
 800455e:	3001      	adds	r0, #1
 8004560:	d09b      	beq.n	800449a <_printf_i+0x166>
 8004562:	3501      	adds	r5, #1
 8004564:	68e3      	ldr	r3, [r4, #12]
 8004566:	9903      	ldr	r1, [sp, #12]
 8004568:	1a5b      	subs	r3, r3, r1
 800456a:	42ab      	cmp	r3, r5
 800456c:	dcf2      	bgt.n	8004554 <_printf_i+0x220>
 800456e:	e7eb      	b.n	8004548 <_printf_i+0x214>
 8004570:	2500      	movs	r5, #0
 8004572:	f104 0619 	add.w	r6, r4, #25
 8004576:	e7f5      	b.n	8004564 <_printf_i+0x230>
 8004578:	080048c1 	.word	0x080048c1
 800457c:	080048d2 	.word	0x080048d2

08004580 <memchr>:
 8004580:	4603      	mov	r3, r0
 8004582:	b510      	push	{r4, lr}
 8004584:	b2c9      	uxtb	r1, r1
 8004586:	4402      	add	r2, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	4618      	mov	r0, r3
 800458c:	d101      	bne.n	8004592 <memchr+0x12>
 800458e:	2000      	movs	r0, #0
 8004590:	e003      	b.n	800459a <memchr+0x1a>
 8004592:	7804      	ldrb	r4, [r0, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	428c      	cmp	r4, r1
 8004598:	d1f6      	bne.n	8004588 <memchr+0x8>
 800459a:	bd10      	pop	{r4, pc}

0800459c <memcpy>:
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a4:	d100      	bne.n	80045a8 <memcpy+0xc>
 80045a6:	4770      	bx	lr
 80045a8:	b510      	push	{r4, lr}
 80045aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ae:	4291      	cmp	r1, r2
 80045b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b4:	d1f9      	bne.n	80045aa <memcpy+0xe>
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <memmove>:
 80045b8:	4288      	cmp	r0, r1
 80045ba:	b510      	push	{r4, lr}
 80045bc:	eb01 0402 	add.w	r4, r1, r2
 80045c0:	d902      	bls.n	80045c8 <memmove+0x10>
 80045c2:	4284      	cmp	r4, r0
 80045c4:	4623      	mov	r3, r4
 80045c6:	d807      	bhi.n	80045d8 <memmove+0x20>
 80045c8:	1e43      	subs	r3, r0, #1
 80045ca:	42a1      	cmp	r1, r4
 80045cc:	d008      	beq.n	80045e0 <memmove+0x28>
 80045ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045d6:	e7f8      	b.n	80045ca <memmove+0x12>
 80045d8:	4601      	mov	r1, r0
 80045da:	4402      	add	r2, r0
 80045dc:	428a      	cmp	r2, r1
 80045de:	d100      	bne.n	80045e2 <memmove+0x2a>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ea:	e7f7      	b.n	80045dc <memmove+0x24>

080045ec <_free_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4605      	mov	r5, r0
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d040      	beq.n	8004676 <_free_r+0x8a>
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f0c      	subs	r4, r1, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfb8      	it	lt
 80045fe:	18e4      	addlt	r4, r4, r3
 8004600:	f000 f910 	bl	8004824 <__malloc_lock>
 8004604:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <_free_r+0x8c>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	b933      	cbnz	r3, 8004618 <_free_r+0x2c>
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	6014      	str	r4, [r2, #0]
 800460e:	4628      	mov	r0, r5
 8004610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004614:	f000 b90c 	b.w	8004830 <__malloc_unlock>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d908      	bls.n	800462e <_free_r+0x42>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	1821      	adds	r1, r4, r0
 8004620:	428b      	cmp	r3, r1
 8004622:	bf01      	itttt	eq
 8004624:	6819      	ldreq	r1, [r3, #0]
 8004626:	685b      	ldreq	r3, [r3, #4]
 8004628:	1809      	addeq	r1, r1, r0
 800462a:	6021      	streq	r1, [r4, #0]
 800462c:	e7ed      	b.n	800460a <_free_r+0x1e>
 800462e:	461a      	mov	r2, r3
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b10b      	cbz	r3, 8004638 <_free_r+0x4c>
 8004634:	42a3      	cmp	r3, r4
 8004636:	d9fa      	bls.n	800462e <_free_r+0x42>
 8004638:	6811      	ldr	r1, [r2, #0]
 800463a:	1850      	adds	r0, r2, r1
 800463c:	42a0      	cmp	r0, r4
 800463e:	d10b      	bne.n	8004658 <_free_r+0x6c>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	4401      	add	r1, r0
 8004644:	1850      	adds	r0, r2, r1
 8004646:	4283      	cmp	r3, r0
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	d1e0      	bne.n	800460e <_free_r+0x22>
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4401      	add	r1, r0
 8004652:	6011      	str	r1, [r2, #0]
 8004654:	6053      	str	r3, [r2, #4]
 8004656:	e7da      	b.n	800460e <_free_r+0x22>
 8004658:	d902      	bls.n	8004660 <_free_r+0x74>
 800465a:	230c      	movs	r3, #12
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	e7d6      	b.n	800460e <_free_r+0x22>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1809      	addeq	r1, r1, r0
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6054      	str	r4, [r2, #4]
 8004674:	e7cb      	b.n	800460e <_free_r+0x22>
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	200002a4 	.word	0x200002a4

0800467c <sbrk_aligned>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4e0e      	ldr	r6, [pc, #56]	; (80046b8 <sbrk_aligned+0x3c>)
 8004680:	460c      	mov	r4, r1
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	4605      	mov	r5, r0
 8004686:	b911      	cbnz	r1, 800468e <sbrk_aligned+0x12>
 8004688:	f000 f8bc 	bl	8004804 <_sbrk_r>
 800468c:	6030      	str	r0, [r6, #0]
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f8b7 	bl	8004804 <_sbrk_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d00a      	beq.n	80046b0 <sbrk_aligned+0x34>
 800469a:	1cc4      	adds	r4, r0, #3
 800469c:	f024 0403 	bic.w	r4, r4, #3
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d007      	beq.n	80046b4 <sbrk_aligned+0x38>
 80046a4:	1a21      	subs	r1, r4, r0
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f8ac 	bl	8004804 <_sbrk_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d101      	bne.n	80046b4 <sbrk_aligned+0x38>
 80046b0:	f04f 34ff 	mov.w	r4, #4294967295
 80046b4:	4620      	mov	r0, r4
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	200002a8 	.word	0x200002a8

080046bc <_malloc_r>:
 80046bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	1ccd      	adds	r5, r1, #3
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	4607      	mov	r7, r0
 80046d2:	db01      	blt.n	80046d8 <_malloc_r+0x1c>
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d905      	bls.n	80046e4 <_malloc_r+0x28>
 80046d8:	230c      	movs	r3, #12
 80046da:	2600      	movs	r6, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4630      	mov	r0, r6
 80046e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e4:	4e2e      	ldr	r6, [pc, #184]	; (80047a0 <_malloc_r+0xe4>)
 80046e6:	f000 f89d 	bl	8004824 <__malloc_lock>
 80046ea:	6833      	ldr	r3, [r6, #0]
 80046ec:	461c      	mov	r4, r3
 80046ee:	bb34      	cbnz	r4, 800473e <_malloc_r+0x82>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4638      	mov	r0, r7
 80046f4:	f7ff ffc2 	bl	800467c <sbrk_aligned>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	4604      	mov	r4, r0
 80046fc:	d14d      	bne.n	800479a <_malloc_r+0xde>
 80046fe:	6834      	ldr	r4, [r6, #0]
 8004700:	4626      	mov	r6, r4
 8004702:	2e00      	cmp	r6, #0
 8004704:	d140      	bne.n	8004788 <_malloc_r+0xcc>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4631      	mov	r1, r6
 800470a:	4638      	mov	r0, r7
 800470c:	eb04 0803 	add.w	r8, r4, r3
 8004710:	f000 f878 	bl	8004804 <_sbrk_r>
 8004714:	4580      	cmp	r8, r0
 8004716:	d13a      	bne.n	800478e <_malloc_r+0xd2>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	3503      	adds	r5, #3
 800471c:	1a6d      	subs	r5, r5, r1
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	4638      	mov	r0, r7
 800472c:	4629      	mov	r1, r5
 800472e:	f7ff ffa5 	bl	800467c <sbrk_aligned>
 8004732:	3001      	adds	r0, #1
 8004734:	d02b      	beq.n	800478e <_malloc_r+0xd2>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	442b      	add	r3, r5
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	e00e      	b.n	800475c <_malloc_r+0xa0>
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	1b52      	subs	r2, r2, r5
 8004742:	d41e      	bmi.n	8004782 <_malloc_r+0xc6>
 8004744:	2a0b      	cmp	r2, #11
 8004746:	d916      	bls.n	8004776 <_malloc_r+0xba>
 8004748:	1961      	adds	r1, r4, r5
 800474a:	42a3      	cmp	r3, r4
 800474c:	6025      	str	r5, [r4, #0]
 800474e:	bf18      	it	ne
 8004750:	6059      	strne	r1, [r3, #4]
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	bf08      	it	eq
 8004756:	6031      	streq	r1, [r6, #0]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4638      	mov	r0, r7
 800475e:	f104 060b 	add.w	r6, r4, #11
 8004762:	f000 f865 	bl	8004830 <__malloc_unlock>
 8004766:	f026 0607 	bic.w	r6, r6, #7
 800476a:	1d23      	adds	r3, r4, #4
 800476c:	1af2      	subs	r2, r6, r3
 800476e:	d0b6      	beq.n	80046de <_malloc_r+0x22>
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	50a3      	str	r3, [r4, r2]
 8004774:	e7b3      	b.n	80046de <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	6032      	streq	r2, [r6, #0]
 800477e:	605a      	strne	r2, [r3, #4]
 8004780:	e7ec      	b.n	800475c <_malloc_r+0xa0>
 8004782:	4623      	mov	r3, r4
 8004784:	6864      	ldr	r4, [r4, #4]
 8004786:	e7b2      	b.n	80046ee <_malloc_r+0x32>
 8004788:	4634      	mov	r4, r6
 800478a:	6876      	ldr	r6, [r6, #4]
 800478c:	e7b9      	b.n	8004702 <_malloc_r+0x46>
 800478e:	230c      	movs	r3, #12
 8004790:	4638      	mov	r0, r7
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f000 f84c 	bl	8004830 <__malloc_unlock>
 8004798:	e7a1      	b.n	80046de <_malloc_r+0x22>
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa0>
 800479e:	bf00      	nop
 80047a0:	200002a4 	.word	0x200002a4

080047a4 <_realloc_r>:
 80047a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	4680      	mov	r8, r0
 80047aa:	4614      	mov	r4, r2
 80047ac:	460e      	mov	r6, r1
 80047ae:	b921      	cbnz	r1, 80047ba <_realloc_r+0x16>
 80047b0:	4611      	mov	r1, r2
 80047b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	f7ff bf81 	b.w	80046bc <_malloc_r>
 80047ba:	b92a      	cbnz	r2, 80047c8 <_realloc_r+0x24>
 80047bc:	f7ff ff16 	bl	80045ec <_free_r>
 80047c0:	4625      	mov	r5, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	f000 f838 	bl	800483c <_malloc_usable_size_r>
 80047cc:	4284      	cmp	r4, r0
 80047ce:	4607      	mov	r7, r0
 80047d0:	d802      	bhi.n	80047d8 <_realloc_r+0x34>
 80047d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047d6:	d812      	bhi.n	80047fe <_realloc_r+0x5a>
 80047d8:	4621      	mov	r1, r4
 80047da:	4640      	mov	r0, r8
 80047dc:	f7ff ff6e 	bl	80046bc <_malloc_r>
 80047e0:	4605      	mov	r5, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d0ed      	beq.n	80047c2 <_realloc_r+0x1e>
 80047e6:	42bc      	cmp	r4, r7
 80047e8:	4622      	mov	r2, r4
 80047ea:	4631      	mov	r1, r6
 80047ec:	bf28      	it	cs
 80047ee:	463a      	movcs	r2, r7
 80047f0:	f7ff fed4 	bl	800459c <memcpy>
 80047f4:	4631      	mov	r1, r6
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fef8 	bl	80045ec <_free_r>
 80047fc:	e7e1      	b.n	80047c2 <_realloc_r+0x1e>
 80047fe:	4635      	mov	r5, r6
 8004800:	e7df      	b.n	80047c2 <_realloc_r+0x1e>
	...

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	2300      	movs	r3, #0
 8004808:	4d05      	ldr	r5, [pc, #20]	; (8004820 <_sbrk_r+0x1c>)
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc fb70 	bl	8000ef4 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	200002ac 	.word	0x200002ac

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f000 b811 	b.w	800484c <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	200002b0 	.word	0x200002b0

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f000 b80c 	b.w	800484e <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	200002b0 	.word	0x200002b0

0800483c <_malloc_usable_size_r>:
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbc      	itt	lt
 8004846:	580b      	ldrlt	r3, [r1, r0]
 8004848:	18c0      	addlt	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <__retarget_lock_acquire_recursive>:
 800484c:	4770      	bx	lr

0800484e <__retarget_lock_release_recursive>:
 800484e:	4770      	bx	lr

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
